[{"path":"https://docs.ropensci.org/rdhs/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdhs/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://docs.ropensci.org/rdhs/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://docs.ropensci.org/rdhs/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look Travis build status making changes. README contain badges continuous integration services used package. recommend tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://docs.ropensci.org/rdhs/CONTRIBUTING.html","id":"writing-tests-that-require-downloading-datasets","dir":"","previous_headings":"","what":"Writing tests that require downloading datasets","title":"CONTRIBUTING","text":"order check contribution passes tests, needt able run full test suite. Instructions can found . Alternatively, can use package’s CI travis, see test suite passed. test suite uses encrypted “rdhs.json” config within package root download datasets. datasets available download config can viewed within “available_test_suite_datasets.csv”. contributions need access dataset available, e.g. new dataset affects flat file parsers, open PR requested DHS website.","code":""},{"path":"https://docs.ropensci.org/rdhs/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note rdhs project released Contributor Code Conduct. contributing project agree abide terms. See rOpenSci contributing guide details.","code":""},{"path":"https://docs.ropensci.org/rdhs/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://docs.ropensci.org/rdhs/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://docs.ropensci.org/rdhs/articles/anemia.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Anemia prevalence: an `rdhs` example","text":"Load rdhs package useful packages analysing data.","code":"## devtools::install_github(\"ropensci/rdhs\") library(rdhs) library(data.table) library(ggplot2) library(survey) library(haven)"},{"path":"https://docs.ropensci.org/rdhs/articles/anemia.html","id":"using-calculated-indicators-from-statcompiler","dir":"Articles","previous_headings":"","what":"Using calculated indicators from STATcompiler","title":"Anemia prevalence: an `rdhs` example","text":"Anemia prevalence among women reported core indicator DHS STATcompiler (https://www.statcompiler.com/). indicators can accessed directly R via DHS API function dhs_data(). Query API list StatCompiler indicators, search indicators \"anemia\" indicator name. API calls return data.frame objects, prefer use data.table objects convert afterwards, can set within config using set_rdhs_config. indicator ID \"AN_ANEM_W_ANY\" reports percentage women anemia. function dhs_data() query indicator dataset value indicator three countries interest. First, use dhs_countries() query list DHS countries identify DHS country code country. Now query indicators dataset women anemia indicator three countries.","code":"library(rdhs) set_rdhs_config(data_frame = \"data.table::as.data.table\")  indicators <- dhs_indicators() tail(indicators[grepl(\"anemia\", Label), .(IndicatorId, ShortName, Label)]) ##      IndicatorId                 ShortName                       Label ## 1: CN_ANMC_C_SEV Severe anemia (<7.0 g/dl) Children with severe anemia ## 2: AN_ANEM_W_ANY                      Any        Women with any anemia ## 3: AN_ANEM_W_MLD                     Mild       Women with mild anemia ## 4: AN_ANEM_W_MOD                 Moderate   Women with moderate anemia ## 5: AN_ANEM_W_SEV                   Severe     Women with severe anemia ## 6: AN_ANEM_M_ANY                Any anemia         Men with any anemia countries <- dhs_countries() dhscc <- countries[CountryName %in% c(\"Armenia\", \"Cambodia\", \"Lesotho\"), DHS_CountryCode] dhscc ## [1] \"AM\" \"KH\" \"LS\" statcomp <- dhs_data(indicatorIds = \"AN_ANEM_W_ANY\", countryIds = dhscc) statcomp[,.(Indicator, CountryName, SurveyYear, Value, DenominatorWeighted)] ##                 Indicator CountryName SurveyYear Value DenominatorWeighted ##  1: Women with any anemia     Armenia       2000  12.4                6137 ##  2: Women with any anemia     Armenia       2005  24.6                6080 ##  3: Women with any anemia     Armenia       2016  13.4                5769 ##  4: Women with any anemia    Cambodia       2000  58.8                3634 ##  5: Women with any anemia    Cambodia       2005  46.7                8219 ##  6: Women with any anemia    Cambodia       2010  44.4                9229 ##  7: Women with any anemia    Cambodia       2014  45.4               11286 ##  8: Women with any anemia     Lesotho       2004  32.9                3008 ##  9: Women with any anemia     Lesotho       2009  26.3                3839 ## 10: Women with any anemia     Lesotho       2014  27.3                3297 ggplot(statcomp, aes(SurveyYear, Value, col=CountryName)) +   geom_point() + geom_line()"},{"path":[]},{"path":"https://docs.ropensci.org/rdhs/articles/anemia.html","id":"identify-surveys-that-include-anemia-testing","dir":"Articles","previous_headings":"Analyse DHS microdata","what":"Identify surveys that include anemia testing","title":"Anemia prevalence: an `rdhs` example","text":"DHS API provides facility filter surveys according particular characteristics. first query list survey characteristics identify SurveyCharacteristicID indicates survey included anemia testing. first command queries API full list survey characteristics, second uses grepl() search SurveyCharacteristicNames include word ‘anemia’. SurveyCharacteristicID = 41 indicates survey included anemia testing. Next query API identify surveys characteristic conducted countries interest. Finally, query API identify individual recode (IR) survey datasets surveys","code":"surveychar <- dhs_survey_characteristics() surveychar[grepl(\"anemia\", SurveyCharacteristicName, ignore.case=TRUE)] ##    SurveyCharacteristicID SurveyCharacteristicName ## 1:                     15         Anemia questions ## 2:                     41           Anemia testing surveys <- dhs_surveys(surveyCharacteristicIds = 41, countryIds = dhscc) surveys[,.(SurveyId, CountryName, SurveyYear, NumberOfWomen, SurveyNum, FieldworkEnd)] ##      SurveyId CountryName SurveyYear NumberOfWomen SurveyNum FieldworkEnd ##  1: AM2000DHS     Armenia       2000          6430       203   2000-12-01 ##  2: AM2005DHS     Armenia       2005          6566       262   2005-12-01 ##  3: AM2016DHS     Armenia       2016          6116       492   2016-04-01 ##  4: KH2000DHS    Cambodia       2000         15351       140   2000-07-01 ##  5: KH2005DHS    Cambodia       2005         16823       257   2006-03-01 ##  6: KH2010DHS    Cambodia       2010         18754       310   2011-01-01 ##  7: KH2014DHS    Cambodia       2014         17578       464   2014-12-01 ##  8: LS2004DHS     Lesotho       2004          7095       256   2005-01-01 ##  9: LS2009DHS     Lesotho       2009          7624       317   2010-01-01 ## 10: LS2014DHS     Lesotho       2014          6621       462   2014-12-01 datasets <- dhs_datasets(surveyIds = surveys$SurveyId, fileType = \"IR\", fileFormat=\"flat\") datasets[, .(SurveyId, SurveyNum, FileDateLastModified, FileName)] ##      SurveyId SurveyNum        FileDateLastModified     FileName ##  1: AM2000DHS       203   October, 05 2006 14:22:40 AMIR42FL.ZIP ##  2: AM2005DHS       262  February, 02 2010 10:38:12 AMIR54FL.zip ##  3: AM2016DHS       492 September, 21 2017 16:10:15 AMIR71FL.ZIP ##  4: KH2000DHS       140   October, 08 2007 12:31:53 KHIR42FL.zip ##  5: KH2005DHS       257   October, 18 2011 13:53:19 KHIR51FL.zip ##  6: KH2010DHS       310   October, 26 2011 11:11:07 KHIR61FL.ZIP ##  7: KH2014DHS       464      July, 28 2017 10:58:10 KHIR73FL.ZIP ##  8: LS2004DHS       256      July, 31 2007 13:14:31 LSIR41FL.ZIP ##  9: LS2009DHS       317  November, 10 2015 10:51:05 LSIR61FL.ZIP ## 10: LS2014DHS       462      June, 14 2016 11:35:19 LSIR71FL.ZIP"},{"path":"https://docs.ropensci.org/rdhs/articles/anemia.html","id":"download-datasets","dir":"Articles","previous_headings":"Analyse DHS microdata","what":"Download datasets","title":"Anemia prevalence: an `rdhs` example","text":"download datasets need first log DHS account, providing credentials setting configuration using set_rdhs_config(). require providing arguments email project want download datasets . prompted password. can also specify directory datasets API calls cached using cache_path. order comply CRAN, function also ask permission write files outside temporary directory, must type filename config_path - “rdhs.json”. (See introduction vignette specific format config, ?set_rdhs_config). function get_datasets() returns list file paths desired datasets saved cache. first time dataset accessed, rdhs download dataset DHS program website using supplied credentials. Subsequently, datasets simply located cached repository.","code":"## set up your credentials set_rdhs_config(email = \"jeffrey.eaton@imperial.ac.uk\",                 project = \"Joint estimation of HIV epidemic trends and adult mortality\") datasets$path <- unlist(get_datasets(datasets$FileName)) ## Logging into DHS website... ## Creating Download url list from DHS website..."},{"path":"https://docs.ropensci.org/rdhs/articles/anemia.html","id":"identify-survey-variables","dir":"Articles","previous_headings":"Analyse DHS microdata","what":"Identify survey variables","title":"Anemia prevalence: an `rdhs` example","text":"Anemia defined hemoglobin (Hb) <12.0 g/dL non-pregnant women Hb <11.0 g/dL currently pregnant women1. calculate anemia prevalence DHS microdata, must identify DHS recode survey variables hemoglobin measurement pregnancy status. done consulting DHS recode manual .MAP files accompanying survey datasets. convenient though R loading first individual recode dataset searching metadata variable names corresponding hemoglobin measurement pregnancy status. Variable v042 records household selection hemoglobin testing. Variable v455 reports outcome hemoglobin measurement v456 result altitude adjusted hemoglobin levels. Variable v454 reports current pregnancy status used determining anemia threshold. also keep number variables related survey design potentially interesting covariates: country code phase (v000), cluster number (v001), sample weight (v005), age (v012), region (v024), urban/rural residence (v025), education level (v106).","code":"head(search_variable_labels(datasets$FileName[10], \"hemoglobin\")[,1:2]) ##   variable ## 1     v042 ## 2    v452c ## 3     v453 ## 4     v455 ## 5     v456 ## 6   hw52_1 ##                                                             description ## 1                                     Household selected for hemoglobin ## 2                                   Read consent statement - hemoglobin ## 3                                   Hemoglobin level (g/dl - 1 decimal) ## 4                                    Result of measurement - hemoglobin ## 5 Hemoglobin level adjusted for altitude and smoking (g/dl - 1 decimal) ## 6                                   Read consent statement - hemoglobin ir <- readRDS(datasets$path[10]) table(as_factor(ir$v042)) ##  ## not selected     selected  ##         3203         3418 table(as_factor(ir$v455)) ##  ##                          measured                       not present  ##                              3349                                 2  ##                           refused                             other  ##                                35                                 8  ## no measurement found in household                           missing  ##                                 0                                24 summary(ir$v456) ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  ##    24.0   118.0   130.0   145.6   141.0   999.0    3203 search_variable_labels(datasets$FileName[1], \"currently.*pregnant\")[,1:2] ##   variable        description ## 1     v213 Currently pregnant ## 2     v454 Currently pregnant table(as_factor(ir$v454)) ##  ## no/don't know           yes       missing  ##          3276           142             0 vars <- c(\"SurveyId\", \"CountryName\", \"SurveyYear\", \"v000\", \"v001\", \"v005\",           \"v012\", \"v024\", \"v025\", \"v106\", \"v042\", \"v454\", \"v455\", \"v456\")"},{"path":"https://docs.ropensci.org/rdhs/articles/anemia.html","id":"extract-survey-data","dir":"Articles","previous_headings":"Analyse DHS microdata","what":"Extract survey data","title":"Anemia prevalence: an `rdhs` example","text":"use rbind_labelled() combine datasets labelled columns. argument labels describes combine variable levels datasets v024 (region) providing consistent set value labels used v454 (currently pregnant) datasets.","code":"datlst <- list()  for(i in 1:nrow(datasets)){    if(file.exists(datasets$path[i])){      print(paste(i, datasets$SurveyId[i]))   ir <- readRDS(datasets$path[i])    ir$SurveyId <- datasets$SurveyId[i]   ir$CountryName <- datasets$CountryName[i]   ir$SurveyYear <- datasets$SurveyYear[i]    datlst[[datasets$SurveyId[i]]] <- ir[vars]   } } ## [1] \"1 AM2000DHS\" ## [1] \"2 AM2005DHS\" ## [1] \"3 AM2016DHS\" ## [1] \"4 KH2000DHS\" ## [1] \"5 KH2005DHS\" ## [1] \"6 KH2010DHS\" ## [1] \"7 KH2014DHS\" ## [1] \"8 LS2004DHS\" ## [1] \"9 LS2009DHS\" ## [1] \"10 LS2014DHS\" dat <- rbind_labelled(datlst,                       labels = list(v024 = \"concatenate\",                                     v454 = c(\"no/don't know\" = 0L,                                              \"yes\" = 1L, \"missing\" = 9L))) ## Warning in rbind_labelled(datlst, labels = list(v024 = \"concatenate\", v454 = c(`no/don't know` = 0L, : Some variables have non-matching value labels: v106, v455, v456. ## Inheriting labels from first data frame with labels. sapply(dat, is.labelled) ##    SurveyId CountryName  SurveyYear        v000        v001        v005  ##       FALSE       FALSE       FALSE       FALSE       FALSE       FALSE  ##        v012        v024        v025        v106        v042        v454  ##       FALSE        TRUE        TRUE        TRUE        TRUE        TRUE  ##        v455        v456     DATASET  ##        TRUE        TRUE       FALSE dat$v456 <- zap_labels(dat$v456) dat <- as_factor(dat)"},{"path":"https://docs.ropensci.org/rdhs/articles/anemia.html","id":"data-tabulations","dir":"Articles","previous_headings":"Analyse DHS microdata","what":"Data tabulations","title":"Anemia prevalence: an `rdhs` example","text":"good idea check basic tabulations data, especially survey identify nuances Exploratory analysis variables","code":"with(dat, table(SurveyId, v025, useNA=\"ifany\")) ##            v025 ## SurveyId    urban rural ##   AM2000DHS  3545  2885 ##   AM2005DHS  4592  1974 ##   AM2016DHS  3545  2571 ##   KH2000DHS  2627 12724 ##   KH2005DHS  4152 12671 ##   KH2010DHS  6077 12677 ##   KH2014DHS  5667 11911 ##   LS2004DHS  1945  5150 ##   LS2009DHS  1977  5647 ##   LS2014DHS  2202  4419 with(dat, table(SurveyId, v106, useNA=\"ifany\")) ##            v106 ## SurveyId    no education primary secondary higher missing ##   AM2000DHS            5      24      5329   1072       0 ##   AM2005DHS            7      24      5138   1397       0 ##   AM2016DHS            5     406      2580   3125       0 ##   KH2000DHS         4849    8182      2276     44       0 ##   KH2005DHS         3772    9131      3771    149       0 ##   KH2010DHS         3203    8796      6141    614       0 ##   KH2014DHS         2233    7826      6535    984       0 ##   LS2004DHS          169    4309      2520     97       0 ##   LS2009DHS          114    3865      3277    368       0 ##   LS2014DHS           81    2665      3354    521       0 with(dat, table(SurveyId, v454, useNA=\"ifany\")) ##            v454 ## SurveyId    no/don't know   yes missing  <NA> ##   AM2000DHS          6231   199       0     0 ##   AM2005DHS          5967   158     441     0 ##   AM2016DHS          5939   177       0     0 ##   KH2000DHS          3312   296      62 11681 ##   KH2005DHS          7685   501     212  8425 ##   KH2010DHS          8906   475       0  9373 ##   KH2014DHS         10883   663       0  6032 ##   LS2004DHS          2857   203       0  4035 ##   LS2009DHS          3740   173     103  3608 ##   LS2014DHS          3276   142       0  3203 with(dat, table(SurveyId, v455, useNA=\"ifany\")) ##            v455 ## SurveyId    measured not present refused other no measurement found in hh ##   AM2000DHS     6137           5     264    24                          0 ##   AM2005DHS     6134           8     294     1                          0 ##   AM2016DHS     5807          11     295     0                          0 ##   KH2000DHS     3666           0      68     0                          0 ##   KH2005DHS     8182           2     185     5                          0 ##   KH2010DHS     9225           9     106     0                          0 ##   KH2014DHS    11390           8      13     2                          0 ##   LS2004DHS     3061          15     377    56                          0 ##   LS2009DHS     3896           1      78     5                          0 ##   LS2014DHS     3349           2      35     8                          0 ##            v455 ## SurveyId    missing  <NA> ##   AM2000DHS       0     0 ##   AM2005DHS     129     0 ##   AM2016DHS       3     0 ##   KH2000DHS       3 11614 ##   KH2005DHS      24  8425 ##   KH2010DHS      41  9373 ##   KH2014DHS     133  6032 ##   LS2004DHS      29  3557 ##   LS2009DHS      36  3608 ##   LS2014DHS      24  3203 with(dat, table(v042, v454, useNA=\"ifany\")) ##               v454 ## v042           no/don't know   yes missing  <NA> ##   not selected             0     0       0 45778 ##   selected             58796  2987     818   579"},{"path":"https://docs.ropensci.org/rdhs/articles/anemia.html","id":"calculate-anemia-prevalence","dir":"Articles","previous_headings":"Analyse DHS microdata","what":"Calculate anemia prevalence","title":"Anemia prevalence: an `rdhs` example","text":"Create indicator variable ‘anemia’. threshold depends pregnancy status. Specify survey design using survey package. table compares prevalence anemia calculated survey microdata estimates DHS StatCompiler weighted denominators calculation. estimates identical cases. small differences ironed , require looking specific countries check stratification carried . (hoping bring feature DHS program compiled sample strata constructed studies).","code":"dat$v456[dat$v456 == 999] <- NA with(dat, table(v455, is.na(v456))) ##                              ## v455                         FALSE  TRUE ##   measured                   60847     0 ##   not present                    0    61 ##   refused                        0  1715 ##   other                          0   101 ##   no measurement found in hh     0     0 ##   missing                        0   422 dat$anemia <- as.integer(dat$v456  < ifelse(dat$v454 == \"yes\", 110, 120)) dat$anemia_denom <- as.integer(!is.na(dat$anemia)) dat$w <- dat$v005/1e6 des <- svydesign(~v001+SurveyId, data=dat, weights=~w)  anemia_prev <- svyby(~anemia, ~SurveyId, des, svyciprop, na.rm=TRUE, vartype=\"ci\") anemia_denom <- svyby(~anemia_denom, ~SurveyId, des, svytotal, na.rm=TRUE)  anemia_prev <- merge(anemia_prev, anemia_denom[c(\"SurveyId\", \"anemia_denom\")]) res <- statcomp[,.(SurveyId, CountryName, SurveyYear, Value, DenominatorUnweighted, DenominatorWeighted)][anemia_prev, on=\"SurveyId\"]  res$anemia <- 100*res$anemia res$ci_l <- 100*res$ci_l res$ci_u <- 100*res$ci_u res$anemia_denom0 <- round(res$anemia_denom) knitr::kable(res[,.(CountryName, SurveyYear, Value, anemia, ci_l, ci_u, DenominatorWeighted, anemia_denom0)], digits=1) ggplot(res, aes(x=SurveyYear, y=anemia, ymin=ci_l, ymax=ci_u,                 col=CountryName, fill=CountryName)) +   geom_ribbon(alpha=0.4, linetype=\"blank\") + geom_point() + geom_line()"},{"path":"https://docs.ropensci.org/rdhs/articles/anemia.html","id":"regression-analysis-relationship-between-education-and-anemia","dir":"Articles","previous_headings":"","what":"Regression analysis: relationship between education and anemia","title":"Anemia prevalence: an `rdhs` example","text":"key use survey microdata conduct secondary analysis pooled data several surveys, regression analysis. investigate relationship anemia prevalence education level (v106) women using logistic regression, adjusting urban/rural (v025) fixed effects survey. results suggest anemia prevalence lower among women higher education.","code":"des <- update(des, v106 = relevel(v106, \"primary\")) summary(svyglm(anemia ~ SurveyId + v025 + v106, des, family=\"binomial\")) ## Warning in eval(family$initialize): non-integer #successes in a binomial ## glm! ##  ## Call: ## svyglm(formula = anemia ~ SurveyId + v025 + v106, des, family = \"binomial\") ##  ## Survey design: ## update(des, v106 = relevel(v106, \"primary\")) ##  ## Coefficients: ##                   Estimate Std. Error t value Pr(>|t|)     ## (Intercept)       -1.91019    0.06478 -29.489  < 2e-16 *** ## SurveyIdAM2005DHS  0.82908    0.08086  10.253  < 2e-16 *** ## SurveyIdAM2016DHS  0.21583    0.09571   2.255 0.024488 *   ## SurveyIdKH2000DHS  2.14550    0.07503  28.596  < 2e-16 *** ## SurveyIdKH2005DHS  1.68112    0.07260  23.155  < 2e-16 *** ## SurveyIdKH2010DHS  1.61671    0.06961  23.224  < 2e-16 *** ## SurveyIdKH2014DHS  1.66621    0.06406  26.011  < 2e-16 *** ## SurveyIdLS2004DHS  1.13997    0.07960  14.322  < 2e-16 *** ## SurveyIdLS2009DHS  0.82962    0.07756  10.696  < 2e-16 *** ## SurveyIdLS2014DHS  0.93593    0.08164  11.464  < 2e-16 *** ## v025rural          0.11625    0.03220   3.610 0.000332 *** ## v106no education   0.15431    0.03845   4.013 6.75e-05 *** ## v106secondary     -0.11932    0.02787  -4.282 2.16e-05 *** ## v106higher        -0.33508    0.04985  -6.722 4.19e-11 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## (Dispersion parameter for binomial family taken to be 0.99451) ##  ## Number of Fisher Scoring iterations: 4"},{"path":"https://docs.ropensci.org/rdhs/articles/boundaries.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Downloading Shape Files for DHS Surveys","text":"rdhs can used download shape files associated DHS surveys. example, can link API responses shape files plot subnational estimates using spatial pacakge sp. , use new function download_boundaries rdhs download shape files.  can use sf plotting, offers user-friendly plotting options.","code":"# load our package library(rdhs)  # make request d <- dhs_data(countryIds = \"SN\",               indicatorIds = \"FE_FRTR_W_A15\",               surveyYearStart = 2014,               breakdown = \"subnational\")  # get our related spatial data frame object sp <- download_boundaries(surveyId = d$SurveyId[1]) ## OGR data source with driver: ESRI Shapefile  ## Source: \"/tmp/RtmpkjqL1S/file115c2d9e2d9d/shps\", layer: \"sdr_subnational_boundaries\" ## with 4 features ## It has 27 fields # match our values to the regions m <- d$Value[match(sp$sdr_subnational_boundaries$REG_ID, d$RegionId)] sp$sdr_subnational_boundaries@data$Value <- m  # Use sp to plot sp::spplot(sp$sdr_subnational_boundaries, \"Value\", main = d$Indicator[1]) # make request d <- dhs_data(countryIds = \"SN\",               indicatorIds = \"FE_FRTR_W_A15\",               surveyYearStart = 2017,               breakdown = \"subnational\")  # get our related spatial data frame object sp <- download_boundaries(surveyId = d$SurveyId[1], method = \"sf\") ## Reading layer `sdr_subnational_boundaries' from data source `/tmp/RtmpkjqL1S/file115c5afcf6fd/shps/sdr_subnational_boundaries.dbf' using driver `ESRI Shapefile' ## Simple feature collection with 14 features and 27 fields ## geometry type:  MULTIPOLYGON ## dimension:      XY ## bbox:           xmin: -17.54548 ymin: 12.30127 xmax: -11.35754 ymax: 16.69266 ## epsg (SRID):    4326 ## proj4string:    +proj=longlat +datum=WGS84 +no_defs # match our values to the regions m <- d$Value[match(sp$sdr_subnational_boundaries$REG_ID, d$RegionId)] sp$sdr_subnational_boundaries$Value <- m  # Use ggplot and geom_sf to plot library(ggplot2) ggplot(sp$sdr_subnational_boundaries) +    geom_sf(aes(fill = Value)) +    ggtitle(d$Indicator[1])"},{"path":"https://docs.ropensci.org/rdhs/articles/client.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"rdhs client object and internal package design","text":"following similar vignette - “use rdhs?”. However, one achieves results using rdhs client object directly download datasets etc, rather using easier user interfacing functions. vignette included help demonstrate pacakge internals working adds information package designed, may useful anyone adding extra functionality rdhs future. bothered please read main introductory vignette. rdhs package management analysis Demographic Health Survey (DHS) data. includes functionality : Access standard indicator data (.e. DHS STATcompiler) R via DHS API. Identify surveys datasets relevant particular analysis. Download survey datasets DHS website. Load datasets associated metadata R. Extract variables combining datasets pooled multi-survey analyses. process described cover functionality needed working datasets.","code":""},{"path":"https://docs.ropensci.org/rdhs/articles/client.html","id":"installation","dir":"Articles","previous_headings":"","what":"0. Installation","title":"rdhs client object and internal package design","text":"Install rdhs github devtools:","code":"# install.packages(\"devtools\") # devtools::install_github(\"ropensci/rdhs\")  library(rdhs)"},{"path":"https://docs.ropensci.org/rdhs/articles/client.html","id":"access-standard-indicator-data-via-the-api","dir":"Articles","previous_headings":"","what":"1. Access standard indicator data via the API","title":"rdhs client object and internal package design","text":"DHS API many endpoints can accessed using anyone dhs_<endpoint>() functions. exported functions within rdhs start dhs_ interact different different endpoint DHS API. website gives great information different search terms filters can used, tried include within documentation function. One endpoints, dhs_data(), interacts published set standard health indicator data calculated DHS. endpoint allows use retrieve set health indicators sample weighted give country, subnational estimates can refined education wealth brackets. use dhs_data() endpoint, can either search specific indicators, querying indicators tagged within specific areas. call DHS endpoint returns data.frame default results available default. DHS unique IndicatorId statistics calculates. definition specific string indicator included within IndicatorId Definition variable: Since quite lot indicators, might easier first query tags. DHS tags indicators areas demography health relate , e.g. anaemia, literacy, malaria parasitaemia specific tags. First let’s look tags , interacting dhs_tags() endpoint, grabbing data related malaria parasitaemia DRC Tanzania since 2010: Depending analysis maybe enough detail. also worth mentioning data can also accessed via DHS STATcompiler prefer click collect version. However, hopefully one can see selecting lot different indicators multiple countries breakdowns lot easier using rdhs API interaction. example can quickly find trends antimalarial use Africa, see perhaps antimalarial prescription decreased RDTs introduced (assumed 2010).  incorrectly entered filter query (possible), rdhs let us know request invalid:","code":"## what are the indicators indicators <- dhs_indicators() indicators[1,] ##                                                                                                           Definition ## 1 Age-specific fertility rate for the three years preceding the survey for age group 10-14 expressed per 1,000 women ##   NumberScale IndicatorType MeasurementType IsQuickStat  ShortName ## 1           0             I            Rate           0 ASFR 10-14 ##     IndicatorId    Level1 IndicatorTotalId          Level2 Level3 ## 1 FE_FRTR_W_A10 Fertility                  Fertility rates  Women ##        SDRID IndicatorOldId TagIds DenominatorWeightedId ## 1 FEFRTRWA10                                             ##                                Label IndicatorOrder ## 1 Age specific fertility rate: 10-14       11763005 ##                                                                     Denominator ## 1 Per thousand women years exposed in the period 1-36 months prior to interview ##   QuickStatOrder IndicatorSpecial1Id DenominatorUnweightedId ## 1                                                            ##   IndicatorSpecial2Id ## 1 # grab the first 5 alphabetically indicators[order(indicators$IndicatorId),][1:5,c(\"IndicatorId\", \"Definition\")] ##        IndicatorId ## 2031 AH_CIGA_M_UNW ## 2026 AH_CIGA_W_10P ## 2023 AH_CIGA_W_12C ## 2024 AH_CIGA_W_35C ## 2025 AH_CIGA_W_69C ##                                                               Definition ## 2031                     Number of men who smoke cigarettes (unweighted) ## 2026 Percentage of women who smoked 10+ cigarettes in preceding 24 hours ## 2023 Percentage of women who smoked 1-2 cigarettes in preceding 24 hours ## 2024 Percentage of women who smoked 3-5 cigarettes in preceding 24 hours ## 2025 Percentage of women who smoked 6-9 cigarettes in preceding 24 hours # What are the tags tags <- dhs_tags()  # Let's say we want to view the tags that relate to malaria tags[grepl(\"Malaria\", tags$TagName), ] ##    TagType                   TagName TagID TagOrder ## 31       0       Malaria Parasitemia    36      540 ## 43       2 Select Malaria Indicators    79     1000 # and now let's then grab this data by specifying the countryIds and the survey year starts data <- dhs_data(tagIds = 36,countryIds = c(\"CD\",\"TZ\"),breakdown=\"subnational\",surveyYearStart = 2010) data[1,] ##   DataId                           Indicator  SurveyId IsPreferred Value ## 1 941297 Malaria prevalence according to RDT CD2013DHS           1  17.1 ##        SDRID Precision        RegionId SurveyYearLabel SurveyType ## 1 MLPMALCRDT         1 CDDHS2013503010         2013-14        DHS ##   SurveyYear IndicatorOrder DHS_CountryCode CILow ## 1       2013      125136010              CD       ##                 CountryName IndicatorType CharacteristicId ## 1 Congo Democratic Republic             I           503010 ##   CharacteristicCategory   IndicatorId CharacteristicOrder ## 1                 Region ML_PMAL_C_RDT             1503010 ##   CharacteristicLabel ByVariableLabel DenominatorUnweighted ## 1            Kinshasa                                   406 ##   DenominatorWeighted CIHigh IsTotal ByVariableId ## 1                 532              0            0 # Make an api request resp <- dhs_data(indicatorIds = \"ML_FEVT_C_AML\", surveyYearStart = 2010,breakdown = \"subnational\")  # filter it to 12 countries for space countries  <- c(\"Angola\",\"Ghana\",\"Kenya\",\"Liberia\",                 \"Madagascar\",\"Mali\",\"Malawi\",\"Nigeria\",                 \"Rwanda\",\"Sierra Leone\",\"Senegal\",\"Tanzania\")  # and plot the results library(ggplot2) ggplot(resp[resp$CountryName %in% countries,],        aes(x=SurveyYear,y=Value,colour=CountryName)) +   geom_point() +   geom_smooth(method = \"glm\") +    theme(axis.text.x = element_text(angle = 90, vjust = .5)) +   ylab(resp$Indicator[1]) +    facet_wrap(~CountryName,ncol = 6) # Make an api request resp <- dhs_data(indicatorIds=\"ML_FEVT_C_AMasfafasfL\",                  surveyYearStart=202231231306,                  breakdown=\"subParTyping\") ## Error in handle_api_response(resp, TRUE):  ##    -> DHS API Request Failed [500]  ##    -> Error Type: dhs_internal_server_error"},{"path":"https://docs.ropensci.org/rdhs/articles/client.html","id":"identify-surveys-relevant-for-further-analysis","dir":"Articles","previous_headings":"","what":"2. Identify surveys relevant for further analysis","title":"rdhs client object and internal package design","text":"may, however, wish nuanced analysis API allows. following 4 section detail basic example quickly identify, download extract datasets interested . Let’s say want get survey data Democratic Republic Congo Tanzania last 5 years (since 2013), covers use rapid diagnostic tests (RDTs) malaria. begin ’ll interact DHS API identify datasets. start extraction ’ll query surveyCharacteristics endpoint using dhs_surveyCharacteristics(): 87 different survey characteristics, one specific survey characteristic Malaria RDTs. ’ll use find surveys include characteristic. can also point filter desired countries years. DHS API allows countries filtered using countryIds, one arguments dhs_surveys(). look countries countryId can use another API endpoints first: Lastly, recommended download either spss (.sav), fileFormat = \"SV\", flat file (.dat), fileFormat = \"FL\" datasets. flat quicker, still one two datasets don’t read correctly, whereas .sav files slower read far datasets found don’t read correctly. can now use download datasets analysis.","code":"## make a call with no arguments sc <- dhs_survey_characteristics() sc[grepl(\"Malaria\", sc$SurveyCharacteristicName), ] ##    SurveyCharacteristicID SurveyCharacteristicName ## 57                     96            Malaria - DBS ## 58                     90     Malaria - Microscopy ## 59                     89            Malaria - RDT ## 60                     57          Malaria module  ## 61                      8 Malaria/bednet questions ## what are the countryIds ids <- dhs_countries(returnFields=c(\"CountryName\", \"DHS_CountryCode\")) str(ids) ## 'data.frame':    91 obs. of  2 variables: ##  $ DHS_CountryCode: chr  \"AF\" \"AL\" \"AO\" \"AM\" ... ##  $ CountryName    : chr  \"Afghanistan\" \"Albania\" \"Angola\" \"Armenia\" ... # lets find all the surveys that fit our search criteria survs <- dhs_surveys(surveyCharacteristicIds = 89,countryIds = c(\"CD\",\"TZ\"),surveyYearStart = 2013)  # and lastly use this to find the datasets we will want to download and let's download the flat files (.dat) datasets (have a look in the dhs_datasets documentation for all argument options, and fileformat abbreviations etc.) datasets <- dhs_datasets(surveyIds = survs$SurveyId, fileFormat = \"flat\") str(datasets) ## 'data.frame':    19 obs. of  13 variables: ##  $ FileFormat          : chr  \"Flat ASCII data (.dat)\" \"Flat ASCII data (.dat)\" \"Flat ASCII data (.dat)\" \"Flat ASCII data (.dat)\" ... ##  $ FileSize            : int  198561 7030083 3226262 8028957 11426382 4794941 1569680 6595349 63022 996906 ... ##  $ DatasetType         : chr  \"HIV Datasets\" \"Survey Datasets\" \"Survey Datasets\" \"Survey Datasets\" ... ##  $ SurveyNum           : int  421 421 421 421 421 421 421 421 421 421 ... ##  $ SurveyId            : chr  \"CD2013DHS\" \"CD2013DHS\" \"CD2013DHS\" \"CD2013DHS\" ... ##  $ FileType            : chr  \"HIV Test Results Recode\" \"Births Recode\" \"Couples' Recode\" \"Household Recode\" ... ##  $ FileDateLastModified: chr  \"November, 14 2014 12:48:34\" \"November, 17 2014 15:42:54\" \"November, 17 2014 15:43:04\" \"September, 19 2016 09:57:20\" ... ##  $ SurveyYearLabel     : chr  \"2013-14\" \"2013-14\" \"2013-14\" \"2013-14\" ... ##  $ SurveyType          : chr  \"DHS\" \"DHS\" \"DHS\" \"DHS\" ... ##  $ SurveyYear          : int  2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 ... ##  $ DHS_CountryCode     : chr  \"CD\" \"CD\" \"CD\" \"CD\" ... ##  $ FileName            : chr  \"CDAR61FL.ZIP\" \"CDBR61FL.ZIP\" \"CDCR61FL.ZIP\" \"CDHR61FL.ZIP\" ... ##  $ CountryName         : chr  \"Congo Democratic Republic\" \"Congo Democratic Republic\" \"Congo Democratic Republic\" \"Congo Democratic Republic\" ..."},{"path":"https://docs.ropensci.org/rdhs/articles/client.html","id":"download-survey-datasets","dir":"Articles","previous_headings":"","what":"3. Download survey datasets","title":"rdhs client object and internal package design","text":"can now go ahead download datasets. need first create client. client R6 class (similar R’s built reference classes make caching survey API queries reproducible) used log DHS account, download datasets , help query datasets question interested . client also cache processes, really helps increase reproducibility analysis. order set credentials use function set_rdhs_config(). require providing arguments email project want download datasets . prompted password. can also specify directory datasets API calls cached using cache_path. provide argument cache_path prompted provide permission rdhs save datasets API calls within user cache directory operating system. comply CRAN’s requests permission granted writing system files. grant permission, written within R temporary directory (saw first used one functions query API). Similarly also provide argument config_path, saved within temp directory unless permission granted. config files always called “rdhs.json”, rdhs can find easily. use client download datasets, worth mentioning client can passed argument API functions just seen. cache results , working remotely without good internet connection can still return previous API requests. happening behind scenes anyway, rdhs create client call API function (one already exist). Now back dataset downloads. look back datasets object, ’ll see 19 datasets listed. However, relevant malaria RDT questions. One approach head DHS website look DHS Recodes, look recodes relate surveys. alternative download surveys query variables within . ’ll demonstrate also demonstrates package’s functionality: first download datasets: function returns list file path downloaded datasets saved . default files download quietly, .e. progress shown. However, want see progress can control setting config using verbose_download argument.","code":"## create a client ## set up your credentials config <- set_rdhs_config(email = \"rdhs.tester@gmail.com\",                 project = \"Testing Malaria Investigations\")  client <- client_dhs(config) client ## <client_dhs> ##   Public: ##     available_datasets: function (clear_cache_first = FALSE)  ##     clear_namespace: function (namespace)  ##     dhs_api_request: function (api_endpoint, query = list(), api_key = private$api_key,  ##     extract: function (questions, add_geo = FALSE)  ##     get_cache_date: function ()  ##     get_config: function ()  ##     get_datasets: function (dataset_filenames, download_option = \"rds\", reformat = FALSE,  ##     get_downloaded_datasets: function ()  ##     get_root: function ()  ##     get_variable_labels: function (dataset_filenames = NULL, dataset_paths = NULL, rm_na = FALSE)  ##     initialize: function (config, api_key = NULL, root = rappdirs_rdhs())  ##     save_client: function ()  ##     set_cache_date: function (date)  ##     survey_questions: function (dataset_filenames, search_terms = NULL, essential_terms = NULL,  ##     survey_variables: function (dataset_filenames, variables, essential_variables = NULL,  ##   Private: ##     api_endpoints: data indicators countries surveys surveycharacteristics  ... ##     api_key: ******** ##     cache_date: 2018-09-24 16:36:45 ##     check_available_datasets: function (filenames)  ##     config: rdhs_config ##     na_s: ^na -|^na-|.*-na$|.* - na$| \\{NA\\}$|.* NA$|.*NA$ ##     package_version: package_version, numeric_version ##     root: C:\\Users\\Oliver\\AppData\\Local\\Oliver\\rdhs\\Cache ##     storr: storr, R6 ##     url: https://api.dhsprogram.com/rest/dhs/ ##     user_declared_root: NULL # download datasets downloads <- client$get_datasets(datasets$FileName)"},{"path":"https://docs.ropensci.org/rdhs/articles/client.html","id":"load-datasets-and-associated-metadata-into-r-","dir":"Articles","previous_headings":"","what":"4. Load datasets and associated metadata into R.","title":"rdhs client object and internal package design","text":"can now examine actually downloaded, reading one datasets: dataset returned contains survey questions within dataset, survey variables : default behaviour client function get_datasets - download datasets , default save client’s root directory unzip read , save resultant data.frame .rds object within client’s root directory. can control behaviour using download_option argument : client$get_datasets(download_option = \"zip\") - Just downloaded zip saved client$get_datasets(download_option = \"rds\") - Just read rds saved client$get_datasets(download_option = \"\") - zip downloaded saved well read rds main reason reading dataset straight away default option created table survey variables definitions cached , allows us quickly query particular search terms survey variables: see questions question “Result malaria rapid test” appears different datasets. household member recode datasets (CDPR61SV, TZPR7HSV) stores information children household, one row per child, whereas household recode (CDHR61SV, TZHR7HSV) stores information household, thus flattens information child different subvariables (hml35$01/02 etc). easier extract information household member recodes.","code":"# read in our dataset cdpr <- readRDS(downloads$CDPR61FL) # let's look at the variable_names head(get_variable_labels(cdpr)) ##   variable                                                  description ## 1     hhid                                          Case Identification ## 2    hvidx                                                  Line number ## 3    hv000                                       Country code and phase ## 4    hv001                                               Cluster number ## 5    hv002                                             Household number ## 6    hv003 Respondent's line number (answering Household questionnaire) # and then the dataset class(cdpr$hv024) ## [1] \"labelled\" # rapid diagnostic test search questions <- client$survey_questions(datasets$FileName, search_terms = \"malaria rapid test\")  table(questions$dataset_filename) ##  ## CDHR61FL CDPR61FL TZHR7AFL TZPR7AFL  ##       24        1       48        1"},{"path":"https://docs.ropensci.org/rdhs/articles/client.html","id":"extract-variables-and-combining-datasets-for-pooled-multi-survey-analyses-","dir":"Articles","previous_headings":"","what":"5. Extract variables and combining datasets for pooled multi-survey analyses.","title":"rdhs client object and internal package design","text":"extract data pass questions object client function extract, create list dataset extracted data data.frame. also option add geographic data available, download geographic data files add data resultant extract: resultant extract list, new element different dataset extracted. responses dataset default stored labelled class haven package. class preserves original semantics can easily coerced factors haven::as_factor(). Special missing values also preserved. info labelled class look github. can also query datasets survey question variables. example survey question Result malaria rapid test variable hml35. knew survey variables wanted (either looking Recode file looking variable_names included datasets) search . let’s grab regions using hv024 using client function survey_variables(): can now combine two dataframes analysis using rdhs package function rbind_labelled(). function works specifically lists labelled data.frames: hasn’t quite done might want second instance. hv024 variable stores regions 2 countries, thus labels different two . Without specifying additional arguments rbind_labelled() simply use first data.frames labelling default, mean Tanzanian provinces encoded DRC provinces - good! (similar problem nature say trying add new character strings factored data.frame). work arounds. Firstly, can specify labels argument function detail handle different variables. labels names list specifies handle variable. simply want keep labels us string “concatenate”: also specify new labels variable. example, imagine two datasets encoded RDT responses differently, first one c(\"\",\"Yes\") c(\"Negative\",\"Positive\"). purposes response, either leave results use c(\"\",\"Yes\") labelling. may want use latter ’s informative/correct, may want crystal clear use c(\"NegativeTest\",\"PositiveTest\"). can like : option use labelled class . can control download datasets, using argument reformat=TRUE. ensure factors labels used just raw data. option set object returned client$get_datasets() longer labelled classes factors. However, can still recover variable table dataset using get_variable_labels(), take dataset output get_datasets() return data.frame describing survey question variables definitions. hv024 column now just characters, possibly best option depending downstream analysis/preferences. ’s reason geographic data added never turned factors labels. Lastly, can now use extract dataset carry regression analysis, investigate relationship malaria prevalence quality wall materials. need first grab sample weights stratification surveys, along extra variables check RDT prevalence calculated using raw data versus API: ’s little , due specific stratification DHS Program used, well potentially grouped primary sampling units. hoping get information DHS survey can make process streamline . lastly construct logistic regression investigate relationship positive malaria RDT whether main walls individual’s house made bricks similar, adjusting urban/rural (v025) fixed effects survey. can see significant negative gradient associated walls made bricks similarly good materials comparison malaria positivity rates RDT. also interesting whether individual slept long lasting insecticidal net (hml20 converted net) significant.","code":"# let's just use the PR files thus datasets <- dhs_datasets(surveyIds = survs$SurveyId, fileFormat = \"FL\", fileType = \"PR\") downloads <- client$get_datasets(datasets$FileName)  # and grab the questions from this again along with also questions detailing the province questions <- client$survey_questions(datasets$FileName, search_terms = c(\"malaria rapid test\"))  # and now extract the data extract <- client$extract(questions, add_geo = FALSE)  # what does our extract look like str(extract) ## List of 2 ##  $ CDPR61FL:Classes 'dhs_dataset' and 'data.frame':  95949 obs. of  2 variables: ##   ..$ hml35   : 'labelled' int [1:95949] NA NA NA NA NA NA NA 1 0 NA ... ##   .. ..- attr(*, \"label\")= chr \"Result of malaria rapid test\" ##   .. ..- attr(*, \"labels\")= Named int [1:3] 0 1 9 ##   .. .. ..- attr(*, \"names\")= chr [1:3] \"negative\" \"positive\" \"missing\" ##   ..$ SurveyId: chr [1:95949] \"CD2013DHS\" \"CD2013DHS\" \"CD2013DHS\" \"CD2013DHS\" ... ##  $ TZPR7AFL:Classes 'dhs_dataset' and 'data.frame':  64880 obs. of  2 variables: ##   ..$ hml35   : 'labelled' int [1:64880] NA NA NA NA NA NA NA 0 NA NA ... ##   .. ..- attr(*, \"label\")= chr \"Result of malaria rapid test\" ##   .. ..- attr(*, \"labels\")= Named int [1:3] 0 1 9 ##   .. .. ..- attr(*, \"names\")= chr [1:3] \"negative\" \"positive\" \"missing\" ##   ..$ SurveyId: chr [1:64880] \"TZ2015DHS\" \"TZ2015DHS\" \"TZ2015DHS\" \"TZ2015DHS\" ... # and grab the questions from this now utilising the survey variables questions <- client$survey_variables(datasets$FileName, variables = c(\"hv024\",\"hml35\"))  # and now extract the data extract2 <- client$extract(questions, add_geo = FALSE)  # quick check  head(extract2$CDPR61FL) ##   hv024 hml35  SurveyId ## 1     4    NA CD2013DHS ## 2     4    NA CD2013DHS ## 3     4    NA CD2013DHS ## 4     4    NA CD2013DHS ## 5     4    NA CD2013DHS ## 6     4    NA CD2013DHS head(extract2$TZPR7HFL) ## NULL # and just to prove that hml35 did actually read in okay (there are just lots of NA) table(extract2$CDPR61FL$hml35,useNA = \"always\") ##  ##     0     1     9  <NA>  ##  5260  2959     8 87722 # first let's bind our first extraction, without the hv024 extract_bound <- rbind_labelled(extract)  head(extract_bound) ##            hml35  SurveyId  DATASET ## CDPR61FL.1    NA CD2013DHS CDPR61FL ## CDPR61FL.2    NA CD2013DHS CDPR61FL ## CDPR61FL.3    NA CD2013DHS CDPR61FL ## CDPR61FL.4    NA CD2013DHS CDPR61FL ## CDPR61FL.5    NA CD2013DHS CDPR61FL ## CDPR61FL.6    NA CD2013DHS CDPR61FL # now let's try our second extraction extract2_bound <- rbind_labelled(extract2) ## Warning in rbind_labelled(extract2): Some variables have non-matching value labels: hv024. ## Inheriting labels from first data frame with labels. # lets try concatenating the hv024 better_bound <- rbind_labelled(extract2, labels = list(\"hv024\"=\"concatenate\"))  head(better_bound$hv024) ## <Labelled integer> ## [1] 6 6 6 6 6 6 ##  ## Labels: ##  value            label ##      1           arusha ##      2         bandundu ##      3        bas-congo ##      4    dar es salaam ##      5           dodoma ##      6         equateur ##      7            geita ##      8           iringa ##      9           kagera ##     10 kasai-occidental ##     11   kasai-oriental ##     12  kaskazini pemba ##     13 kaskazini unguja ##     14          katanga ##     15           katavi ##     16           kigoma ##     17      kilimanjaro ##     18         kinshasa ##     19     kusini pemba ##     20    kusini unguja ##     21            lindi ##     22          maniema ##     23          manyara ##     24             mara ##     25            mbeya ##     26  mjini magharibi ##     27         morogoro ##     28           mtwara ##     29           mwanza ##     30           njombe ##     31        nord-kivu ##     32        orientale ##     33            pwani ##     34            rukwa ##     35           ruvuma ##     36        shinyanga ##     37           simiyu ##     38          singida ##     39         sud-kivu ##     40           tabora ##     41            tanga # lets try concatenating the hv024 and providing new labels better_bound <- rbind_labelled(extract2,                                labels = list(\"hv024\"=\"concatenate\",                                              \"hml35\"=c(\"NegativeTest\"=0, \"PositiveTest\"=1)))  # and our new label head(better_bound$hml35) ## <Labelled integer> ## [1] NA NA NA NA NA NA ##  ## Labels: ##  value        label ##      0 NegativeTest ##      1 PositiveTest # download the datasets with the reformat arguments downloads <- client$get_datasets(datasets$FileName, reformat=TRUE)  # grab the questions but specifying the reformat argument questions <- client$survey_variables(datasets$FileName, variables = c(\"hv024\", \"hml35\"),                                      reformat=TRUE)  # and now extract the data extract3 <- client$extract(questions, add_geo = FALSE)  # group our results bound_no_labels <- rbind_labelled(extract3)  # what does our hv024 look like now class(bound_no_labels$hv024[1]) ## [1] \"character\" # grab the additional variable hv023 and hv024 which have the strata and weights respectively questions <- client$survey_variables(datasets$FileName,variables = c(\"hv005\",\"hv021\",\"hv022\",\"hv023\",\"hv024\",                                                               \"hv025\",\"hv214\",\"hml20\", \"hc1\",\"hml35\")) extraction <- client$extract(questions,TRUE)  # now concatenate the provinces as before and remove missing responses dat <- rbind_labelled(extraction,labels=list(\"hv024\"=\"concatenate\",\"hv214\"=\"concatenate\")) dat <- dat[-which(dat$hml35==9),] # remove missing responses  # and we are going to compare our extract to the API malaria prevalence by RDT, which is for those between 6 and 59 months dat <- dat[-which(!dat$hc1>6 & dat$hc1<=60),]  # create a denominator response for hml35 dat$hml35denom <- as.integer(!is.na(dat$hml35)) dat$bricks <- dat$hv214 %in% c(8,18,5,9,10) dat$net <- as.logical(dat$hml20)  # specify the strata and sample weights dat$strata <- paste0(dat$hv023,dat$DATASET) dat$hv005 <- dat$hv005/1e6  # construct a survey design using the survey pacakge library(survey)  # construct the sample design and calculate the mean and totals  des <-  survey::svydesign(~CLUSTER+DATASET,data=dat,weight=~hv005) results <- cbind(survey::svyby(~hml35,by=~DHSREGNA+DATASET, des, survey::svyciprop,na.rm=TRUE),                  survey::svyby(~hml35denom,by=~DHSREGNA+DATASET, des, survey::svytotal,na.rm=TRUE)) results <- results[order(results$DATASET),]  # grab the same data from the API  dhs_api_data <- dhs_data(countryIds = c(\"CD\",\"TZ\"),indicatorIds = \"ML_PMAL_C_RDT\",breakdown = \"subnational\",surveyYearStart = 2013, surveyYearEnd = 2016) dhs_api_data <- cbind(dhs_api_data$Value,dhs_api_data$DenominatorWeighted,dhs_api_data$CharacteristicLabel, dhs_api_data$SurveyId) api <- dhs_api_data[!grepl(\"\\\\.\\\\.\",dhs_api_data[,3]),] # remove subregions included in Tanzania api <- api[order(apply(api[,4:3],1,paste,collapse=\"\")),]  # bind the results and remove duplicate Region Columns comparison <- cbind(results[,c(1,3,7)],api[]) names(comparison) <- c(\"Region\",\"Survey_RDT_Prev\",\"Survey_RDT_Denom\",\"API_RDT_Prev\",\"API_RDT_Denom\",\"API_Regions\",\"SurveyID\")  head(comparison[,c(1,2,4,3,5,7)]) ##                                     Region Survey_RDT_Prev API_RDT_Prev ## Bandundu.CDPR61FL                 Bandundu       0.2038607         20.2 ## Bas-Congo.CDPR61FL               Bas-Congo       0.4761599         47.1 ## Equateur.CDPR61FL                 Equateur       0.2732268         27.4 ## Kasai-Occidental.CDPR61FL Kasai-Occidental       0.4507341         44.5 ## Kasai-Oriental.CDPR61FL     Kasai-Oriental       0.4923113         49.4 ## Katanga.CDPR61FL                   Katanga       0.3989890         38.9 ##                           Survey_RDT_Denom API_RDT_Denom  SurveyID ## Bandundu.CDPR61FL                1415.6056          1414 CD2013DHS ## Bas-Congo.CDPR61FL                342.6473           347 CD2013DHS ## Equateur.CDPR61FL                1267.4746          1236 CD2013DHS ## Kasai-Occidental.CDPR61FL         604.6050           612 CD2013DHS ## Kasai-Oriental.CDPR61FL           892.6006           894 CD2013DHS ## Katanga.CDPR61FL                  861.2030           844 CD2013DHS # contsruct our glm using svyglm and specify quasibinomial to handle the na in hml35 summary(svyglm(hml35 ~ DATASET + hv025 + net + bricks, des, family=\"quasibinomial\")) ##  ## Call: ## svyglm(formula = hml35 ~ DATASET + hv025 + net + bricks, des,  ##     family = \"quasibinomial\") ##  ## Survey design: ## survey::svydesign(~CLUSTER + DATASET, data = dat, weight = ~hv005) ##  ## Coefficients: ##                 Estimate Std. Error t value Pr(>|t|)     ## (Intercept)     -1.65528    0.23267  -7.114 3.20e-12 *** ## DATASETTZPR7AFL -0.95553    0.12901  -7.406 4.39e-13 *** ## hv025            0.52558    0.13009   4.040 6.03e-05 *** ## netTRUE          0.06529    0.07163   0.911    0.362     ## bricksTRUE      -0.72109    0.13517  -5.335 1.36e-07 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## (Dispersion parameter for quasibinomial family taken to be 0.9563804) ##  ## Number of Fisher Scoring iterations: 4"},{"path":"https://docs.ropensci.org/rdhs/articles/client.html","id":"summary-and-further-thoughts","dir":"Articles","previous_headings":"","what":"Summary and further thoughts","title":"rdhs client object and internal package design","text":"Hopefully tutorial shown rdhs package can facilitate querying DHS API hopefully make downloading interacting raw datasets smoother, reproducible process. worth bearing mind though, creating harmonised dataset always easy example - lot time survey variables differ across years surveys, hopefully survey_questions functionality make easier first filter include relevant questions decide survey questions valid. suggestions comments/corrections/errors/ideas please let know either issues send email “o.watson15@imperial.ac.uk”. functionality think useful, also let know. :)","code":""},{"path":"https://docs.ropensci.org/rdhs/articles/country_codes.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Country Names and Codes","text":"following shows return table country names 2 letter codes. can get information querying API using dhs_countries, specifying returnFields argument just return country name DHS country code. useful reference table want pass country IDs number API functions, e.g. dhs_data(countryIds = \"BJ\")","code":"library(rdhs)  ## what are the countryIds ids <- dhs_countries(returnFields=c(\"CountryName\", \"DHS_CountryCode\")) ids ##     DHS_CountryCode                      CountryName ##  1:              AF                      Afghanistan ##  2:              AL                          Albania ##  3:              AO                           Angola ##  4:              AM                          Armenia ##  5:              AZ                       Azerbaijan ##  6:              BD                       Bangladesh ##  7:              BJ                            Benin ##  8:              BO                          Bolivia ##  9:              BT                         Botswana ## 10:              BR                           Brazil ## 11:              BF                     Burkina Faso ## 12:              BU                          Burundi ## 13:              KH                         Cambodia ## 14:              CM                         Cameroon ## 15:              CV                       Cape Verde ## 16:              CF         Central African Republic ## 17:              TD                             Chad ## 18:              CO                         Colombia ## 19:              KM                          Comoros ## 20:              CG                            Congo ## 21:              CD        Congo Democratic Republic ## 22:              CI                    Cote d'Ivoire ## 23:              DR               Dominican Republic ## 24:              EC                          Ecuador ## 25:              EG                            Egypt ## 26:              ES                      El Salvador ## 27:              EK                Equatorial Guinea ## 28:              ER                          Eritrea ## 29:              ET                         Ethiopia ## 30:              GA                            Gabon ## 31:              GM                           Gambia ## 32:              GH                            Ghana ## 33:              GU                        Guatemala ## 34:              GN                           Guinea ## 35:              GY                           Guyana ## 36:              HT                            Haiti ## 37:              HN                         Honduras ## 38:              IA                            India ## 39:              ID                        Indonesia ## 40:              JO                           Jordan ## 41:              KK                       Kazakhstan ## 42:              KE                            Kenya ## 43:              KY                  Kyrgyz Republic ## 44:              LA Lao People's Democratic Republic ## 45:              LS                          Lesotho ## 46:              LB                          Liberia ## 47:              MD                       Madagascar ## 48:              MW                           Malawi ## 49:              MV                         Maldives ## 50:              ML                             Mali ## 51:              MR                       Mauritania ## 52:              MX                           Mexico ## 53:              MB                          Moldova ## 54:              MA                          Morocco ## 55:              MZ                       Mozambique ## 56:              MM                          Myanmar ## 57:              NM                          Namibia ## 58:              NP                            Nepal ## 59:              NC                        Nicaragua ## 60:              NI                            Niger ## 61:              NG                          Nigeria ## 62:              PK                         Pakistan ## 63:              PG                 Papua New Guinea ## 64:              PY                         Paraguay ## 65:              PE                             Peru ## 66:              PH                      Philippines ## 67:              RW                           Rwanda ## 68:              WS                            Samoa ## 69:              ST            Sao Tome and Principe ## 70:              SN                          Senegal ## 71:              SL                     Sierra Leone ## 72:              ZA                     South Africa ## 73:              LK                        Sri Lanka ## 74:              SD                            Sudan ## 75:              SZ                        Swaziland ## 76:              TJ                       Tajikistan ## 77:              TZ                         Tanzania ## 78:              TH                         Thailand ## 79:              TL                      Timor-Leste ## 80:              TG                             Togo ## 81:              TT              Trinidad and Tobago ## 82:              TN                          Tunisia ## 83:              TR                           Turkey ## 84:              TM                     Turkmenistan ## 85:              UG                           Uganda ## 86:              UA                          Ukraine ## 87:              UZ                       Uzbekistan ## 88:              VN                          Vietnam ## 89:              YE                            Yemen ## 90:              ZM                           Zambia ## 91:              ZW                         Zimbabwe ##     DHS_CountryCode                      CountryName"},{"path":"https://docs.ropensci.org/rdhs/articles/geojson.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Interacting with geojson API returns","text":"API can return geojson objects, can useful quickly creating maps DHS indicator data. large objects though, can cause API return slowly much data returned. demonstration using 2 packages, leaflet geojson.","code":"# load our package library(rdhs)  # install other packages # install.packages(\"geojson\") # install.packages(\"leaflet\") # make request d <- dhs_data(countryIds = \"SN\",               indicatorIds = \"FE_FRTR_W_A15\",               surveyYearStart = 2014,               breakdown = \"subnational\",               returnGeometry = TRUE,               f = \"geojson\")  # convert to sp m <- geojsonio::as.json(d) nc <- geojsonio::geojson_sp(m)   # plot using leaflet pal <- leaflet::colorNumeric(\"viridis\", NULL)  leaflet::leaflet(nc[nc$IndicatorId==\"FE_FRTR_W_A15\",]) %>%   leaflet::addTiles() %>%   leaflet::addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,               fillColor = ~pal(log10(Value)),               label = ~paste0(CharacteristicLabel, \": \", formatC(Value, big.mark = \",\"))) %>%   leaflet::addLegend(pal = pal, values = ~log10(Value), opacity = 1.0,             labFormat = leaflet::labelFormat(transform = function(x) round(10^x)),title = ~Indicator[1])"},{"path":"https://docs.ropensci.org/rdhs/articles/introduction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"How to use rdhs?","text":"rdhs package management analysis Demographic Health Survey (DHS) data. includes functionality : Access standard indicator data (.e. DHS STATcompiler) R via DHS API. Identify surveys datasets relevant particular analysis. Download survey datasets DHS website. Load datasets associated metadata R. Extract variables combining datasets pooled multi-survey analyses. process described cover functionality needed working datasets.","code":""},{"path":"https://docs.ropensci.org/rdhs/articles/introduction.html","id":"installation","dir":"Articles","previous_headings":"","what":"0. Installation","title":"How to use rdhs?","text":"Install rdhs github devtools: starting tutorial, wish download survey datasets DHS website, need set account DHS website, enable request access datasets. Instructions can found . email, password, project name used create account need provided rdhs attempting download datasets. can still interact DHS API section 1-2 without account DHS website, however, need create account wish go steps 3-5.","code":"# install.packages(\"devtools\") # devtools::install_github(\"ropensci/rdhs\") library(rdhs)"},{"path":"https://docs.ropensci.org/rdhs/articles/introduction.html","id":"access-standard-indicator-data-via-the-api","dir":"Articles","previous_headings":"","what":"1. Access standard indicator data via the API","title":"How to use rdhs?","text":"DHS programme published API gives access number different data sets, represent one DHS API endpoints (e.g. https://api.dhsprogram.com/rest/dhs/tags, https://api.dhsprogram.com/rest/dhs/surveys). data sets include standard health indicators available within DHS STATcompiler well series meta data sets describe types surveys conducted well raw dataset files available surveys. data sets described within DHS API website, currently 12 different data sets available API. data sets can accessed using anyone dhs_<>() functions. exported functions within rdhs start dhs_ interact different data set DHS API. website gives great information different search terms filters can used, tried include within documentation function. data sets One functions, dhs_data(), interacts published set standard health indicator data calculated DHS. data set contains set health indicators sample weighted give country, subnational estimates can refined education wealth brackets. use dhs_data() function, can either search specific indicators, querying indicators tagged within specific areas. call DHS API returns data.frame default results available default. DHS unique IndicatorId statistics calculates. definition specific string indicator included within IndicatorId Definition variable: Since quite lot indicators, might easier first query tags. DHS tags indicators areas demography health relate , e.g. anaemia, literacy, malaria parasitaemia specific tags. First let’s look tags , interacting dhs_tags() function, grabbing data related malaria parasitaemia DRC Tanzania since 2010: Depending analysis maybe enough detail. also worth mentioning data can also accessed via DHS STATcompiler prefer click collect version. However, hopefully one can see selecting lot different indicators multiple countries breakdowns lot easier using rdhs API interaction. example can quickly find trends antimalarial use Africa, see perhaps antimalarial prescription decreased RDTs introduced (assumed 2010).  incorrectly entered filter query (possible), rdhs let us know request invalid:","code":"## what are the indicators indicators <- dhs_indicators() indicators[1,] ##                                                                                                            Definition ## 1: Age-specific fertility rate for the three years preceding the survey for age group 10-14 expressed per 1,000 women ##    NumberScale IndicatorType MeasurementType IsQuickStat  ShortName ## 1:           0             I            Rate           0 ASFR 10-14 ##      IndicatorId    Level1 IndicatorTotalId          Level2 Level3 ## 1: FE_FRTR_W_A10 Fertility                  Fertility rates  Women ##         SDRID IndicatorOldId TagIds DenominatorWeightedId ## 1: FEFRTRWA10                                             ##                                 Label IndicatorOrder ## 1: Age specific fertility rate: 10-14       11763005 ##                                                                      Denominator ## 1: Per thousand women years exposed in the period 1-36 months prior to interview ##    QuickStatOrder IndicatorSpecial1Id DenominatorUnweightedId ## 1:                                                            ##    IndicatorSpecial2Id ## 1: # grab the first 5 alphabetically indicators[order(indicators$IndicatorId),][1:5,c(\"IndicatorId\", \"Definition\")] ##      IndicatorId ## 1: AH_CIGA_M_UNW ## 2: AH_CIGA_W_10P ## 3: AH_CIGA_W_12C ## 4: AH_CIGA_W_35C ## 5: AH_CIGA_W_69C ##                                                             Definition ## 1:                     Number of men who smoke cigarettes (unweighted) ## 2: Percentage of women who smoked 10+ cigarettes in preceding 24 hours ## 3: Percentage of women who smoked 1-2 cigarettes in preceding 24 hours ## 4: Percentage of women who smoked 3-5 cigarettes in preceding 24 hours ## 5: Percentage of women who smoked 6-9 cigarettes in preceding 24 hours # What are the tags tags <- dhs_tags()  # Let's say we want to view the tags that relate to malaria tags[grepl(\"Malaria\", tags$TagName), ] ##    TagType                   TagName TagID TagOrder ## 1:       0       Malaria Parasitemia    36      540 ## 2:       2 Select Malaria Indicators    79     1000 # and now let's then grab this data by specifying the countryIds and the survey year starts data <- dhs_data(tagIds = 36,countryIds = c(\"CD\",\"TZ\"),breakdown=\"subnational\",surveyYearStart = 2010) data[1,] ##     DataId                           Indicator  SurveyId IsPreferred Value ## 1: 1945295 Malaria prevalence according to RDT CD2013DHS           1  17.1 ##         SDRID Precision        RegionId SurveyYearLabel SurveyType ## 1: MLPMALCRDT         1 CDDHS2013503010         2013-14        DHS ##    SurveyYear IndicatorOrder DHS_CountryCode CILow ## 1:       2013      125136010              CD       ##                  CountryName IndicatorType CharacteristicId ## 1: Congo Democratic Republic             I           503010 ##    CharacteristicCategory   IndicatorId CharacteristicOrder ## 1:                 Region ML_PMAL_C_RDT             1503010 ##    CharacteristicLabel ByVariableLabel DenominatorUnweighted ## 1:            Kinshasa                                   406 ##    DenominatorWeighted CIHigh IsTotal ByVariableId ## 1:                 532              0            0 # Make an api request resp <- dhs_data(indicatorIds = \"ML_FEVT_C_AML\", surveyYearStart = 2010,breakdown = \"subnational\")  # filter it to 12 countries for space countries  <- c(\"Angola\",\"Ghana\",\"Kenya\",\"Liberia\",                 \"Madagascar\",\"Mali\",\"Malawi\",\"Nigeria\",                 \"Rwanda\",\"Sierra Leone\",\"Senegal\",\"Tanzania\")  # and plot the results library(ggplot2) ggplot(resp[resp$CountryName %in% countries,],        aes(x=SurveyYear,y=Value,colour=CountryName)) +   geom_point() +   geom_smooth(method = \"glm\") +    theme(axis.text.x = element_text(angle = 90, vjust = .5)) +   ylab(resp$Indicator[1]) +    facet_wrap(~CountryName,ncol = 6) # Make an api request resp <- dhs_data(indicatorIds=\"ML_FEVT_C_AMasfafasfL\",                  surveyYearStart=202231231306,                  breakdown=\"subParTyping\") ## Error in timeout_safe_request(url, timeout, encode = \"json\"): API Timeout Error: No response after 30 seconds. ##  Either increase timeout using set_rdhs_config(timeout = ...) ##  or check if the API is down by checking: ##  https://api.dhsprogram.com/rest/dhs/dataupdates"},{"path":"https://docs.ropensci.org/rdhs/articles/introduction.html","id":"identify-surveys-relevant-for-further-analysis","dir":"Articles","previous_headings":"","what":"2. Identify surveys relevant for further analysis","title":"How to use rdhs?","text":"may, however, wish nuanced analysis API allows. following 4 sections detail basic example quickly identify, download extract datasets interested . Let’s say want get DHS survey data Democratic Republic Congo Tanzania last 5 years (since 2013), covers use rapid diagnostic tests (RDTs) malaria. begin ’ll interact DHS API identify datasets. start extraction ’ll query surveyCharacteristics data set using dhs_survey_characteristics() function: 87 different survey characteristics, one specific survey characteristic Malaria RDTs. ’ll use find surveys include characteristic. can also point filter desired countries years. DHS API allows countries filtered using countryIds, one arguments dhs_surveys(). look countries countryId can use another API functions: Lastly, recommended download either spss (.sav), fileFormat = \"SV\", flat file (.dat), fileFormat = \"FL\" datasets. flat quicker, still one two datasets don’t read correctly, whereas .sav files slower read far datasets found don’t read correctly. can now use download datasets analysis.","code":"## make a call with no arguments sc <- dhs_survey_characteristics() sc[grepl(\"Malaria\", sc$SurveyCharacteristicName), ] ##    SurveyCharacteristicID SurveyCharacteristicName ## 1:                     96            Malaria - DBS ## 2:                     90     Malaria - Microscopy ## 3:                     89            Malaria - RDT ## 4:                     57          Malaria module  ## 5:                      8 Malaria/bednet questions ## what are the countryIds ids <- dhs_countries(returnFields=c(\"CountryName\", \"DHS_CountryCode\")) str(ids) ## Classes 'data.table' and 'data.frame':   91 obs. of  2 variables: ##  $ DHS_CountryCode: chr  \"AF\" \"AL\" \"AO\" \"AM\" ... ##  $ CountryName    : chr  \"Afghanistan\" \"Albania\" \"Angola\" \"Armenia\" ... ##  - attr(*, \".internal.selfref\")=<externalptr> # lets find all the surveys that fit our search criteria survs <- dhs_surveys(surveyCharacteristicIds = 89,                      countryIds = c(\"CD\",\"TZ\"),                      surveyType = \"DHS\",                      surveyYearStart = 2013)  # and lastly use this to find the datasets we will want to download and let's download the flat files (.dat) datasets (have a look in the dhs_datasets documentation for all argument options, and fileformat abbreviations etc.) datasets <- dhs_datasets(surveyIds = survs$SurveyId,                           fileFormat = \"flat\") str(datasets) ## Classes 'data.table' and 'data.frame':   19 obs. of  13 variables: ##  $ FileFormat          : chr  \"Flat ASCII data (.dat)\" \"Flat ASCII data (.dat)\" \"Flat ASCII data (.dat)\" \"Flat ASCII data (.dat)\" ... ##  $ FileSize            : int  198561 7030083 3226262 8028957 11426382 4794941 1569680 6595349 63022 996906 ... ##  $ DatasetType         : chr  \"HIV Datasets\" \"Survey Datasets\" \"Survey Datasets\" \"Survey Datasets\" ... ##  $ SurveyNum           : int  421 421 421 421 421 421 421 421 421 421 ... ##  $ SurveyId            : chr  \"CD2013DHS\" \"CD2013DHS\" \"CD2013DHS\" \"CD2013DHS\" ... ##  $ FileType            : chr  \"HIV Test Results Recode\" \"Births Recode\" \"Couples' Recode\" \"Household Recode\" ... ##  $ FileDateLastModified: chr  \"November, 14 2014 12:48:34\" \"November, 17 2014 15:42:54\" \"November, 17 2014 15:43:04\" \"September, 19 2016 09:57:20\" ... ##  $ SurveyYearLabel     : chr  \"2013-14\" \"2013-14\" \"2013-14\" \"2013-14\" ... ##  $ SurveyType          : chr  \"DHS\" \"DHS\" \"DHS\" \"DHS\" ... ##  $ SurveyYear          : int  2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 ... ##  $ DHS_CountryCode     : chr  \"CD\" \"CD\" \"CD\" \"CD\" ... ##  $ FileName            : chr  \"CDAR61FL.ZIP\" \"CDBR61FL.ZIP\" \"CDCR61FL.ZIP\" \"CDHR61FL.ZIP\" ... ##  $ CountryName         : chr  \"Congo Democratic Republic\" \"Congo Democratic Republic\" \"Congo Democratic Republic\" \"Congo Democratic Republic\" ... ##  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://docs.ropensci.org/rdhs/articles/introduction.html","id":"download-survey-datasets","dir":"Articles","previous_headings":"","what":"3. Download survey datasets","title":"How to use rdhs?","text":"can now go ahead download datasets. able download survey datasets DHS website, need set account enable request access datasets. Instructions can found . email, password, project name used create account need provided rdhs attempting download datasets. created account, need set credentials using function set_rdhs_config(). require providing arguments email project want download datasets . prompted password. can also specify directory datasets API calls cached using cache_path. provide argument cache_path prompted provide permission rdhs save datasets API calls within user cache directory operating system. comply CRAN’s requests permission granted writing system files. grant permission, written within R temporary directory (saw first used one functions query API). Similarly also provide argument config_path, saved within temp directory unless permission granted. config files always called “rdhs.json”, rdhs can find easily. may one project set DHS website, may want separate directory set datasets, thus need set different config file. need set local config file. can achieved setting global param FALSE (.e. global). also now need provide config_path argument, MUST “rdhs.json”. order comply CRAN, type (rather default option). may, however, different projects DHS website, case may prefer set one global config file. want saved user cache directory, can set global TRUE (default) save R default launch directory. MUST ~/.rdhs.json. (really difference saving ~/.rdhs.json vs user cache directory, might want somewhere easy find etc). used set_rdhs_config, rdhs try find config file next use rdhs different R session. first looking locally “rdhs.json”, globally “~/.rdhs.json”, user cache directory, lastly creating one temp directory. happening first used one API functions, config created query API initially able download datasets. Lastly, wish return data.table API requests, rather data.frame can change default behaviour using data_frame argument. also use convert tibbles : see config used rdhs point, use get_rdhs_config() view config settings. download datasets, worth mentioning set login credentials, API calls cached within cache directory used. allow working remotely without good internet connection able still return previous API requests. , API requests still cached within temp directory, quick returned second time, deleted start new R session. Now back dataset downloads. look back datasets object, ’ll see 19 datasets listed. However, relevant malaria RDT questions. One approach head DHS website look DHS Recodes, look recodes relate surveys. alternative download surveys query variables within . ’ll demonstrate also demonstrates package’s functionality: first download datasets: function returns list file path downloaded datasets saved . default files download quietly, .e. progress shown. However, want see progress can control setting config using verbose_download argument.","code":"## set up your credentials set_rdhs_config(email = \"rdhs.tester@gmail.com\",                 project = \"Testing Malaria Investigations\") ## Writing your configuration to: ##    -> /home/oj/.cache/rdhs/rdhs.json ## Adding /home/oj/.cache/rdhs/rdhs.json to .gitignore ## set up your credentials set_rdhs_config(email = \"rdhs.tester@gmail.com\",                 project = \"Testing Malaria Investigations\",                 config_path = \"rdhs.json\",                 cache_path = \"project_one\",                 global = FALSE) ## Writing your configuration to: ##    -> rdhs.json ## set up your credentials set_rdhs_config(email = \"rdhs.tester@gmail.com\",                 project = \"Testing Malaria Investigations\",                 config_path = \"~/.rdhs.json\",                 global = TRUE) ## Writing your configuration to: ##    -> ~/.rdhs.json ## set up your credentials set_rdhs_config(email = \"rdhs.tester@gmail.com\",                 project = \"Testing Malaria Investigations\",                 config_path = \"~/.rdhs.json\",                 data_frame = \"data.table::as.data.table\",                 global = TRUE) ## Writing your configuration to: ##    -> ~/.rdhs.json # the first time we call this function, rdhs will make the API request microbenchmark::microbenchmark(dhs_surveys(surveyYear = 1992),times = 1) ## Unit: milliseconds ##                            expr      min       lq     mean   median ##  dhs_surveys(surveyYear = 1992) 13.83736 13.83736 13.83736 13.83736 ##        uq      max neval ##  13.83736 13.83736     1 # with it cached it will be returned much quicker microbenchmark::microbenchmark(dhs_surveys(surveyYear = 1992), times = 1) ## Unit: milliseconds ##                            expr      min       lq     mean   median ##  dhs_surveys(surveyYear = 1992) 4.307866 4.307866 4.307866 4.307866 ##        uq      max neval ##  4.307866 4.307866     1 # download datasets downloads <- get_datasets(datasets$FileName)"},{"path":"https://docs.ropensci.org/rdhs/articles/introduction.html","id":"load-datasets-and-associated-metadata-into-r-","dir":"Articles","previous_headings":"","what":"4. Load datasets and associated metadata into R.","title":"How to use rdhs?","text":"can now examine actually downloaded, reading one datasets: dataset returned contains survey questions within dataset. dataset default stored labelled class haven package. class preserves original semantics can easily coerced factors haven::as_factor(). Special missing values also preserved. info labelled class look github. look returned variable hv024: want get data dictionary dataset, can use function get_variable_labels, return question variables dataset refer : many survey responses give enough information us understand data . However, questions may less clear exactly question means may differ similar questions. case, DHS website publishes lot infrmation survey protocols surveys. strongly advise people look DHS website’s documentation using datasets analysis section, well recode files understand surveys carried . saw default behaviour function get_datasets download datasets, read , save resultant data.frame .rds object within cache directory. can control behaviour using download_option argument : get_datasets(download_option = \"zip\") - Just downloaded zip saved get_datasets(download_option = \"rds\") - Just read rds saved get_datasets(download_option = \"\") - zip downloaded saved well read rds main reason reading dataset straight away default option rdhs also create table survey variables labels (definitions) cache , allows us quickly query particular search terms survey variables: see questions question “Result malaria rapid test” appears different datasets. household member recode datasets (CDPR61SV, TZPR7ASV) stores information children household, one row per child, whereas household recode (CDHR61SV, TZHR7ASV) stores information household, thus flattens information child different subvariables (hml35$01/02 etc). easier extract information household member recodes.","code":"# read in our dataset cdpr <- readRDS(downloads$CDPR61FL) head(cdpr$hv024) ## <Labelled integer>: Province ## [1] 4 4 4 4 4 4 ##  ## Labels: ##  value            label ##      1         kinshasa ##      2         bandundu ##      3        bas-congo ##      4         equateur ##      5 kasai-occidental ##      6   kasai-oriental ##      7          katanga ##      8          maniema ##      9        nord-kivu ##     10        orientale ##     11         sud-kivu # and then the dataset class(cdpr$hv024) ## [1] \"haven_labelled\" # let's look at the variable_names head(get_variable_labels(cdpr)) ##   variable                                                  description ## 1     hhid                                          Case Identification ## 2    hvidx                                                  Line number ## 3    hv000                                       Country code and phase ## 4    hv001                                               Cluster number ## 5    hv002                                             Household number ## 6    hv003 Respondent's line number (answering Household questionnaire) # rapid diagnostic test search questions <- search_variable_labels(datasets$FileName, search_terms = \"malaria rapid test\")  table(questions$dataset_filename) ##  ## CDHR61FL CDPR61FL TZHR7AFL TZPR7AFL  ##       24        1       48        1"},{"path":"https://docs.ropensci.org/rdhs/articles/introduction.html","id":"extract-variables-and-combining-datasets-for-pooled-multi-survey-analyses-","dir":"Articles","previous_headings":"","what":"5. Extract variables and combining datasets for pooled multi-survey analyses.","title":"How to use rdhs?","text":"extract data pass questions object function extract_dhs, create list dataset extracted data data.frame. also option add geographic data available, download geographic data files add data resultant extract: resultant extract list, new element different dataset extracted. responses dataset default stored labelled class haven package. can also query datasets survey question variables. example survey variable label Result malaria rapid test variable hml35. knew survey variables wanted (either looking Recode file looking variable_names included datasets) search . let’s grab regions using hv024 using client function search_variables(): can now combine two dataframes analysis using rdhs package function rbind_labelled(). function works specifically lists labelled data.frames: hasn’t quite done might want second instance. hv024 variable stores regions 2 countries, thus labels different two . Without specifying additional arguments rbind_labelled() simply use first data.frames labelling default, mean Tanzanian provinces encoded DRC provinces - good! (similar problem nature say trying add new character strings factored data.frame). work arounds. Firstly, can specify labels argument function detail handle different variables. labels names list specifies handle variable. simply want keep labels us string “concatenate”: also specify new labels variable. example, imagine two datasets encoded RDT responses differently, first one c(\"\",\"Yes\") c(\"Negative\",\"Positive\"). purposes response, either leave results use c(\"\",\"Yes\") labelling. may want use latter ’s informative/correct, may want crystal clear use c(\"NegativeTest\",\"PositiveTest\"). can like : option use labelled class . can control download datasets, using argument reformat=TRUE. ensure factors labels used just raw data. option set object returned get_datasets() longer labelled classes factors. However, can still recover variable table dataset using get_variable_labels(), take dataset output get_datasets() return data.frame describing survey question variables definitions. hv024 column now just characters, possibly best option depending downstream analysis/preferences. ’s reason geographic data added never turned factors labels. Lastly, can now use extract dataset carry regression analysis, investigate relationship malaria prevalence quality wall materials. need first grab sample weights stratification surveys, along extra variables check RDT prevalence calculated using raw data versus API: ’s little , mean values differing due maybe specific cut used terms ages included within 5 69. variance also due specific stratification DHS Program used, well potentially grouped primary sampling units. hoping get information DHS survey can make process streamline end user. lastly construct logistic regression investigate relationship positive malaria RDT whether main walls individual’s house made bricks similar, adjusting urban/rural (hv025) fixed effects survey. can see significant negative gradient associated walls made bricks similarly good materials comparison malaria positivity rates RDT. also interesting whether individual slept long lasting insecticidal net (hml20 converted net) significant.","code":"# let's just use the PR files thus datasets <- dhs_datasets(surveyIds = survs$SurveyId, fileFormat = \"FL\", fileType = \"PR\") downloads <- get_datasets(datasets$FileName)  # and grab the questions from this again along with also questions detailing the province questions <- search_variable_labels(datasets$FileName, search_terms = c(\"malaria rapid test\"))  # and now extract the data extract <- extract_dhs(questions, add_geo = FALSE)  # what does our extract look like str(extract) ## List of 2 ##  $ CDPR61FL:Classes 'dhs_dataset' and 'data.frame':  95949 obs. of  2 variables: ##   ..$ hml35   : 'haven_labelled' int [1:95949] NA NA NA NA NA NA NA 1 0 NA ... ##   .. ..- attr(*, \"label\")= chr \"Result of malaria rapid test\" ##   .. ..- attr(*, \"labels\")= Named int [1:3] 0 1 9 ##   .. .. ..- attr(*, \"names\")= chr [1:3] \"negative\" \"positive\" \"missing\" ##   ..$ SurveyId: chr [1:95949] \"CD2013DHS\" \"CD2013DHS\" \"CD2013DHS\" \"CD2013DHS\" ... ##  $ TZPR7AFL:Classes 'dhs_dataset' and 'data.frame':  64880 obs. of  2 variables: ##   ..$ hml35   : 'haven_labelled' int [1:64880] NA NA NA NA NA NA NA 0 NA NA ... ##   .. ..- attr(*, \"label\")= chr \"Result of malaria rapid test\" ##   .. ..- attr(*, \"labels\")= Named int [1:3] 0 1 9 ##   .. .. ..- attr(*, \"names\")= chr [1:3] \"negative\" \"positive\" \"missing\" ##   ..$ SurveyId: chr [1:64880] \"TZ2015DHS\" \"TZ2015DHS\" \"TZ2015DHS\" \"TZ2015DHS\" ... # and grab the questions from this now utilising the survey variables questions <- search_variables(datasets$FileName, variables = c(\"hv024\",\"hml35\"))  # and now extract the data extract2 <- extract_dhs(questions, add_geo = FALSE)  # quick check  head(extract2$CDPR61FL) ##   hv024 hml35  SurveyId ## 1     4    NA CD2013DHS ## 2     4    NA CD2013DHS ## 3     4    NA CD2013DHS ## 4     4    NA CD2013DHS ## 5     4    NA CD2013DHS ## 6     4    NA CD2013DHS head(extract2$TZPR7AFL) ##   hv024 hml35  SurveyId ## 1     1    NA TZ2015DHS ## 2     1    NA TZ2015DHS ## 3     1    NA TZ2015DHS ## 4     1    NA TZ2015DHS ## 5     1    NA TZ2015DHS ## 6     1    NA TZ2015DHS # and just to prove that hml35 did actually read in okay (there are just lots of NA) table(extract2$CDPR61FL$hml35,useNA = \"always\") ##  ##     0     1     9  <NA>  ##  5260  2959     8 87722 # first let's bind our first extraction, without the hv024 extract_bound <- rbind_labelled(extract)  head(extract_bound) ##            hml35  SurveyId  DATASET ## CDPR61FL.1    NA CD2013DHS CDPR61FL ## CDPR61FL.2    NA CD2013DHS CDPR61FL ## CDPR61FL.3    NA CD2013DHS CDPR61FL ## CDPR61FL.4    NA CD2013DHS CDPR61FL ## CDPR61FL.5    NA CD2013DHS CDPR61FL ## CDPR61FL.6    NA CD2013DHS CDPR61FL # now let's try our second extraction extract2_bound <- rbind_labelled(extract2) ## Warning in rbind_labelled(extract2): Some variables have non-matching value labels: hv024. ## Inheriting labels from first data frame with labels. # lets try concatenating the hv024 better_bound <- rbind_labelled(extract2, labels = list(\"hv024\"=\"concatenate\"))  head(better_bound$hv024) ## <Labelled integer> ## [1] 6 6 6 6 6 6 ##  ## Labels: ##  value            label ##      1           arusha ##      2         bandundu ##      3        bas-congo ##      4    dar es salaam ##      5           dodoma ##      6         equateur ##      7            geita ##      8           iringa ##      9           kagera ##     10 kasai-occidental ##     11   kasai-oriental ##     12  kaskazini pemba ##     13 kaskazini unguja ##     14          katanga ##     15           katavi ##     16           kigoma ##     17      kilimanjaro ##     18         kinshasa ##     19     kusini pemba ##     20    kusini unguja ##     21            lindi ##     22          maniema ##     23          manyara ##     24             mara ##     25            mbeya ##     26  mjini magharibi ##     27         morogoro ##     28           mtwara ##     29           mwanza ##     30           njombe ##     31        nord-kivu ##     32        orientale ##     33            pwani ##     34            rukwa ##     35           ruvuma ##     36        shinyanga ##     37           simiyu ##     38          singida ##     39         sud-kivu ##     40           tabora ##     41            tanga # lets try concatenating the hv024 and providing new labels better_bound <- rbind_labelled(   extract2,   labels = list(\"hv024\"=\"concatenate\",                 \"hml35\"=c(\"NegativeTest\"=0, \"PositiveTest\"=1)) )  # and our new label head(better_bound$hml35) ## <Labelled integer>: Result of malaria rapid test ## [1] NA NA NA NA NA NA ##  ## Labels: ##  value        label ##      0 NegativeTest ##      1 PositiveTest # download the datasets with the reformat arguments downloads <- get_datasets(datasets$FileName, reformat=TRUE)  # grab the questions but specifying the reformat argument questions <- search_variables(datasets$FileName, variables = c(\"hv024\", \"hml35\"),                                      reformat=TRUE)  # and now extract the data extract3 <- extract_dhs(questions, add_geo = FALSE)  # group our results bound_no_labels <- rbind_labelled(extract3)  # what does our hv024 look like now class(bound_no_labels$hv024[1]) ## [1] \"character\" # grab the additional variable hv023 and hv024 which have the strata and weights respectively, and hc1 which is the age questions <- search_variables(datasets$FileName,variables = c(\"hv005\",\"hv021\",\"hv022\",\"hv023\",\"hv024\",                                                               \"hv025\",\"hv214\",\"hml20\", \"hc1\",\"hml35\")) extraction <- extract_dhs(questions,TRUE)  # now concatenate the provinces as before and remove missing responses dat <- rbind_labelled(extraction,labels=list(\"hv024\"=\"concatenate\",\"hv214\"=\"concatenate\")) dat <- dat[-which(dat$hml35==9),] # remove missing responses  # and we are going to compare our extract to the API malaria prevalence by RDT, which is for those between 6 and 59 months dat <- dat[-which(!dat$hc1>6 & dat$hc1<=60),]  # create a denominator response for hml35 dat$hml35denom <- as.integer(!is.na(dat$hml35)) dat$bricks <- dat$hv214 %in% c(8,18,5,9,10) dat$net <- as.logical(dat$hml20)  # specify the strata and sample weights dat$strata <- paste0(dat$hv023,dat$DATASET) dat$hv005 <- dat$hv005/1e6  # construct a survey design using the survey pacakge library(survey)  # construct the sample design and calculate the mean and totals  des <-  survey::svydesign(~CLUSTER+DATASET,data=dat,weight=~hv005) results <- cbind(survey::svyby(~hml35,by=~DHSREGNA+DATASET, des, survey::svyciprop,na.rm=TRUE),                  survey::svyby(~hml35denom,by=~DHSREGNA+DATASET, des, survey::svytotal,na.rm=TRUE)) results <- results[order(results$DATASET),]  # grab the same data from the API  dhs_api_data <- dhs_data(countryIds = c(\"CD\",\"TZ\"),indicatorIds = \"ML_PMAL_C_RDT\",breakdown = \"subnational\",surveyYearStart = 2013, surveyYearEnd = 2016) dhs_api_data <- cbind(dhs_api_data$Value,dhs_api_data$DenominatorWeighted,dhs_api_data$CharacteristicLabel, dhs_api_data$SurveyId) api <- dhs_api_data[!grepl(\"\\\\.\\\\.\",dhs_api_data[,3]),] # remove subregions included in Tanzania api <- api[order(apply(api[,4:3],1,paste,collapse=\"\")),]  # bind the results and remove duplicate Region Columns comparison <- cbind(results[,c(1,3,7)],api[]) names(comparison) <- c(\"Region\",\"Survey_RDT_Prev\",\"Survey_RDT_Denom\",\"API_RDT_Prev\",\"API_RDT_Denom\",\"API_Regions\",\"SurveyID\") head(comparison[,c(1,2,4,3,5,7)]) ##                                     Region Survey_RDT_Prev API_RDT_Prev ## Bandundu.CDPR61FL                 Bandundu       0.2038607         20.2 ## Bas-Congo.CDPR61FL               Bas-Congo       0.4761599         47.1 ## Equateur.CDPR61FL                 Equateur       0.2732268         27.4 ## Kasai-Occidental.CDPR61FL Kasai-Occidental       0.4507341         44.5 ## Kasai-Oriental.CDPR61FL     Kasai-Oriental       0.4923113         49.4 ## Katanga.CDPR61FL                   Katanga       0.3989890         38.9 ##                           Survey_RDT_Denom API_RDT_Denom  SurveyID ## Bandundu.CDPR61FL                1415.6056          1414 CD2013DHS ## Bas-Congo.CDPR61FL                342.6473           347 CD2013DHS ## Equateur.CDPR61FL                1267.4746          1236 CD2013DHS ## Kasai-Occidental.CDPR61FL         604.6050           612 CD2013DHS ## Kasai-Oriental.CDPR61FL           892.6006           894 CD2013DHS ## Katanga.CDPR61FL                  861.2030           844 CD2013DHS # contsruct our glm using svyglm and specify quasibinomial to handle the na in hml35 summary(svyglm(hml35 ~ DATASET + hv025 + net + bricks, des, family=\"quasibinomial\")) ##  ## Call: ## svyglm(formula = hml35 ~ DATASET + hv025 + net + bricks, design = des,  ##     family = \"quasibinomial\") ##  ## Survey design: ## survey::svydesign(~CLUSTER + DATASET, data = dat, weight = ~hv005) ##  ## Coefficients: ##                 Estimate Std. Error t value Pr(>|t|)     ## (Intercept)     -1.65528    0.23267  -7.114 3.20e-12 *** ## DATASETTZPR7AFL -0.95553    0.12901  -7.406 4.39e-13 *** ## hv025            0.52558    0.13009   4.040 6.03e-05 *** ## netTRUE          0.06529    0.07163   0.911    0.362     ## bricksTRUE      -0.72109    0.13517  -5.335 1.36e-07 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## (Dispersion parameter for quasibinomial family taken to be 0.9563804) ##  ## Number of Fisher Scoring iterations: 4"},{"path":"https://docs.ropensci.org/rdhs/articles/introduction.html","id":"summary-and-further-thoughts","dir":"Articles","previous_headings":"","what":"Summary and further thoughts","title":"How to use rdhs?","text":"Hopefully tutorial shown rdhs package can facilitate querying DHS API hopefully make downloading interacting raw datasets smoother, reproducible process. worth bearing mind though, creating harmonised dataset always easy example - lot time survey variables differ across years surveys, hopefully survey_questions functionality make easier first filter include relevant questions decide survey questions valid. suggestions comments/corrections/errors/ideas please let know either issues send email “o.watson15@imperial.ac.uk”. functionality think useful, also let know. :)","code":""},{"path":"https://docs.ropensci.org/rdhs/articles/testing.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Running test suite locally","text":"following guide describing able run full test suite locally.","code":""},{"path":"https://docs.ropensci.org/rdhs/articles/testing.html","id":"creating-an-account-with-the-dhs-website","dir":"Articles","previous_headings":"","what":"1. Creating an account with the DHS website","title":"Running test suite locally","text":"order run tests rdhs package need created account DHS website. requires 5 mins fill form days approve account creation. start head DHS website go Data tab . full rationale process can found website . short provide contact information describe study conducting requires DHS survey datasets. Importantly, filling form describing description study sure include mention needing geographic datasets number tests download geographic datasets. filled need specify countries datasets need. order full test suite work must request every country dataset type possible. done DHS programme take days approve request email let know email address provided.","code":""},{"path":"https://docs.ropensci.org/rdhs/articles/testing.html","id":"setting-up-your-rdhs-config","dir":"Articles","previous_headings":"","what":"2. Setting up your rdhs config","title":"Running test suite locally","text":"now created account, can set rdhs configuration, allow download datasets website. also enable tests included “test_downloads.R”, “test_extraction.R” “test_ui.R” run, tests first check rdhs config file (“rdhs.json”) within testing directory. cloned/downloaded repository, need set rdhs config file within testing directory, able run test suite full.","code":"pkg_dir <- \"C:/Users/Oliver/GoogleDrive/AcademicWork/Imperial/git/rdhs\" setwd(file.path(pkg_dir,\"tests/testthat/\")) rdhs::set_rdhs_config(email = \"rdhs.tester@gmail.com\",                       project = \"Testing Malaria Investigations\",                        config_path = \"rdhs.json\",                        global = FALSE)  # devtools::test(pkg_dir)"},{"path":"https://docs.ropensci.org/rdhs/articles/toolkit.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Toolkit","text":"following longer needed CRAN version haven working. vignette still though case need non-CRAN pacakge future. order install rdhs require working development environment. following guide details across different operating systems. Please note temporary wait development version haven make CRAN. Apologies inconvenience Windows: Install Rtools. help install Rtools please see following guide, paying particular attention section adding Rtools system PATH. order find version Rtools need check version R running. can found using sessionInfo() function: Mac: Install Xcode Mac App Store. Linux: Install compiler various development libraries (details vary across different flavors Linux). working development environment ready following work :","code":"sessionInfo() R version 3.4.4 (2016-06-21) Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 7 x64 (build 7601) Service Pack 1 # install.packages(\"devtools\") # devtools::install_github(\"ropensci/rdhs\") # library(rdhs)"},{"path":"https://docs.ropensci.org/rdhs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"OJ Watson. Author, maintainer. Jeff Eaton. Author. Lucy D'Agostino McGowan. Reviewer. Duncan Gillespie. Reviewer.","code":""},{"path":"https://docs.ropensci.org/rdhs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Watson OJ, FitzJohn R Eaton JW. rdhs: R package interact Demographic Health Surveys (DHS) Program datasets Wellcome Open Research 2019, 4:103. (https://doi.org/10.12688/wellcomeopenres.15311.1)","code":"@Article{,   title = {rdhs: an R package to interact with The Demographic and Health Surveys (DHS) Program datasets},   author = {Oliver J Watson and Rich FitzJohn and Jeffrey W Eaton},   journal = {Wellcome Open Research},   year = {2019},   volume = {4},   pages = {103},   url = {https://wellcomeopenresearch.org/articles/4-103/v1},   doi = {10.12688/wellcomeopenres.15311.1}, }"},{"path":[]},{"path":"https://docs.ropensci.org/rdhs/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"API Client and Dataset Management for the Demographic and Health Survey (DHS) Data","text":"Demographic Health Surveys (DHS) Program collected population survey data 90 countries 30 years. many countries, DHS provide key data mark progress towards targets Sustainable Development Goals (SDGs) inform health policy. Though standard health indicators routinely published survey final reports, much value DHS derived ability download analyse standardized microdata datasets subgroup analysis, pooled multi-country analysis, extended research studies. suite tools within rdhs improves accessibility datasets statistical analysis R, aim support reproducible global health research simplify common analytical pipelines. questions regarding analyse DHS survey data, please read DHS website’s data section first. questions please create issue question. really likely question help people posting publically issue may help others similar questions. rdhs package management analysis Demographic Health Survey (DHS) data. includes functionality : Access standard indicator data (.e. DHS STATcompiler) R via DHS API. Identify surveys datasets relevant particular analysis. Download survey datasets DHS website. Load datasets associated metadata R. Extract variables combining datasets pooled multi-survey analyses.","code":""},{"path":"https://docs.ropensci.org/rdhs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"API Client and Dataset Management for the Demographic and Health Survey (DHS) Data","text":"can install latest version CRAN using: can also install development version rdhs latest patches github :","code":"install.packages(\"rdhs\") #install.packages(\"devtools\") devtools::install_github(\"ropensci/rdhs\") # Load the package library(rdhs)"},{"path":"https://docs.ropensci.org/rdhs/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"API Client and Dataset Management for the Demographic and Health Survey (DHS) Data","text":"able download survey datasets DHS website, need set account DHS website, enable request access datasets. Instructions can found . email, password, project name used create account need provided rdhs attempting download datasets. Request dataset access DHS website . Full functionality described tutorial . example workflow using rdhs calculate trends anemia prevalence available .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdhs/index.html","id":"query-the-dhs-api","dir":"","previous_headings":"Basic Functionality","what":"Query the DHS API.","title":"API Client and Dataset Management for the Demographic and Health Survey (DHS) Data","text":"Obtain survey estimates Malaria prevalence among children Democratic Republic Congo Tanzania last 5 years (since 2013) included rapid diagnostic tests (RDTs).","code":"dhs_indicators(indicatorIds = \"ML_PMAL_C_RDT\", returnFields=c(\"IndicatorId\", \"ShortName\")) #>                             ShortName   IndicatorId #> 1 Malaria prevalence according to RDT ML_PMAL_C_RDT  dhs_data(countryIds = c(\"CD\",\"TZ\"), indicatorIds = \"ML_PMAL_C_RDT\", surveyYearStart = 2013,        returnFields=c(\"Indicator\", \"SurveyId\", \"Value\", \"SurveyYearLabel\", \"CountryName\")) #>                             Indicator  SurveyId SurveyYearLabel Value #> 1 Malaria prevalence according to RDT CD2013DHS         2013-14  30.8 #> 2 Malaria prevalence according to RDT TZ2015DHS         2015-16  14.4 #> 3 Malaria prevalence according to RDT TZ2017MIS            2017   7.3 #>                 CountryName #> 1 Congo Democratic Republic #> 2                  Tanzania #> 3                  Tanzania"},{"path":"https://docs.ropensci.org/rdhs/index.html","id":"identify-survey-datasets","dir":"","previous_headings":"Basic Functionality","what":"Identify survey datasets","title":"API Client and Dataset Management for the Demographic and Health Survey (DHS) Data","text":"Now, obtain survey microdatasets analyze indicators. Query surveyCharacteristics endpoint identify survey characteristic ID malaria RDT testing. Use dhs_surveys() identify surveys countries years interest. Lastly, identify datasets required download. default, recommended option download either spss (.sav), fileFormat = \"SV\", flat file (.dat), fileFormat = \"FL\" datasets. flat quicker, still one two old datasets don’t read correctly, whereas .sav files slower read far datasets found don’t read correctly. household member recode (PR) reports RDT status children five.","code":"## call with no arguments to return all characterstics sc <- dhs_survey_characteristics() sc[grepl(\"Malaria\", sc$SurveyCharacteristicName), ] #>    SurveyCharacteristicID SurveyCharacteristicName #> 58                     96            Malaria - DBS #> 59                     90     Malaria - Microscopy #> 60                     89            Malaria - RDT #> 61                     57 Malaria bednet inventory ## what are the countryIds - we can find that using this API request ids <- dhs_countries(returnFields=c(\"CountryName\", \"DHS_CountryCode\"))  ## find all the surveys that match the search criteria survs <- dhs_surveys(surveyCharacteristicIds = 89, countryIds = c(\"CD\",\"TZ\"), surveyYearStart = 2013) datasets <- dhs_datasets(surveyIds = survs$SurveyId, fileFormat = \"FL\", fileType = \"PR\") str(datasets) #> 'data.frame':    3 obs. of  13 variables: #>  $ FileFormat          : chr  \"Flat ASCII data (.dat)\" \"Flat ASCII data (.dat)\" \"Flat ASCII data (.dat)\" #>  $ FileSize            : int  6595349 6491292 2171918 #>  $ DatasetType         : chr  \"Survey Datasets\" \"Survey Datasets\" \"Survey Datasets\" #>  $ SurveyNum           : int  421 485 529 #>  $ SurveyId            : chr  \"CD2013DHS\" \"TZ2015DHS\" \"TZ2017MIS\" #>  $ FileType            : chr  \"Household Member Recode\" \"Household Member Recode\" \"Household Member Recode\" #>  $ FileDateLastModified: chr  \"September, 19 2016 09:58:23\" \"September, 28 2019 17:58:28\" \"June, 11 2019 15:38:22\" #>  $ SurveyType          : chr  \"DHS\" \"DHS\" \"MIS\" #>  $ SurveyYearLabel     : chr  \"2013-14\" \"2015-16\" \"2017\" #>  $ SurveyYear          : chr  \"2013\" \"2015\" \"2017\" #>  $ DHS_CountryCode     : chr  \"CD\" \"TZ\" \"TZ\" #>  $ FileName            : chr  \"CDPR61FL.ZIP\" \"TZPR7BFL.ZIP\" \"TZPR7IFL.ZIP\" #>  $ CountryName         : chr  \"Congo Democratic Republic\" \"Tanzania\" \"Tanzania\""},{"path":"https://docs.ropensci.org/rdhs/index.html","id":"download-datasets","dir":"","previous_headings":"Basic Functionality","what":"Download datasets","title":"API Client and Dataset Management for the Demographic and Health Survey (DHS) Data","text":"can now go ahead download datasets. able download survey datasets DHS website, need set account enable request access datasets. Instructions can found . email, password, project name used create account need provided rdhs attempting download datasets. created account, need set credentials using function set_rdhs_config(). require providing arguments email project want download datasets . prompted password. can also specify directory datasets API calls cached using cache_path. order comply CRAN, function also ask permission write files outside temporary directory, must type filename config_path - “rdhs.json”. (See introduction vignette specific format config, ?set_rdhs_config). path config saved sessions set . credentials set, API requests cached within cache_path directory provided can returned working remotely poor internet connection. Now download datasets providing list desired dataset filenames.","code":"## login set_rdhs_config(email = \"rdhs.tester@gmail.com\",                 project = \"rdhs R package development\",                 config_path = \"rdhs.json\",                 global = FALSE) #> Writing your configuration to: #>    -> rdhs.json # the first time this will take a few seconds  microbenchmark::microbenchmark(dhs_datasets(surveyYearStart = 1986),times = 1) #> Unit: milliseconds #>                                  expr     min      lq    mean  median      uq #>  dhs_datasets(surveyYearStart = 1986) 46.3744 46.3744 46.3744 46.3744 46.3744 #>      max neval #>  46.3744     1  # after caching, results will be available instantly microbenchmark::microbenchmark(dhs_datasets(surveyYearStart = 1986),times = 1) #> Unit: milliseconds #>                                  expr      min       lq     mean   median #>  dhs_datasets(surveyYearStart = 1986) 1.410894 1.410894 1.410894 1.410894 #>        uq      max neval #>  1.410894 1.410894     1 # download datasets downloads <- get_datasets(datasets$FileName)  str(downloads) #> List of 3 #>  $ CDPR61FL: chr \"/home/oj/.cache/rdhs/datasets/CDPR61FL.rds\" #>  $ TZPR7BFL: chr \"/home/oj/.cache/rdhs/datasets/TZPR7BFL.rds\" #>  $ TZPR7IFL: chr \"/home/oj/.cache/rdhs/datasets/TZPR7IFL.rds\" #>  - attr(*, \"reformat\")= logi FALSE"},{"path":"https://docs.ropensci.org/rdhs/index.html","id":"load-datasets-into-r","dir":"","previous_headings":"Basic Functionality","what":"Load datasets into R","title":"API Client and Dataset Management for the Demographic and Health Survey (DHS) Data","text":"get_datasets() function returns vector file path saved location downloaded datasets. read using readRDS(): Value labels stored attributes columns data frame using labelled class (see haven::labelled introduction vignette details). Variable labels stored label attribute.","code":"# read in first dataset cdpr <- readRDS(downloads$CDPR61FL)"},{"path":"https://docs.ropensci.org/rdhs/index.html","id":"extract-variables-and-pool-datasets","dir":"","previous_headings":"Basic Functionality","what":"Extract variables and pool datasets","title":"API Client and Dataset Management for the Demographic and Health Survey (DHS) Data","text":"client also caches variable labels quickly query variables survey without loading datasets. extract variables datasets. Optionally, geographic data may added. returned object list extracted datasets. Dataset extracts can alternate specified providing vector surveys vector variable names: Finally, two datasets pooled using function rbind_labelled(). function works specifically lists labelled data.frames. Labels specified variable: hv024 labels retained (concatenate) hml35 labels across datasets “Neg” “Pos”. also option process downloaded datasets labelled variables coded strings, rather labelled variables. specified argument reformat=TRUE.","code":"# rapid diagnostic test search vars <- search_variable_labels(datasets$FileName, search_terms = \"malaria rapid test\") # and now extract the data extract <- extract_dhs(vars, add_geo = FALSE) #> Starting Survey 1 out of 3 surveys:CDPR61FL #> Starting Survey 2 out of 3 surveys:TZPR7BFL #> Starting Survey 3 out of 3 surveys:TZPR7IFL # and grab the questions from this now utilising the survey variables vars <- search_variables(datasets$FileName, variables = c(\"hv024\",\"hml35\"))  # and now extract the data extract <- extract_dhs(vars, add_geo = FALSE) #> Starting Survey 1 out of 3 surveys:CDPR61FL #> Starting Survey 2 out of 3 surveys:TZPR7BFL #> Starting Survey 3 out of 3 surveys:TZPR7IFL # now let's try our second extraction extract <- rbind_labelled(extract,                           labels = list(\"hv024\" = \"concatenate\",                                         \"hml35\" = c(\"Neg\"=0, \"Pos\"=1))) # identify questions but specifying the reformat argument questions <- search_variables(datasets$FileName, variables = c(\"hv024\", \"hml35\"),                                      reformat=TRUE)  # and now extract the data extract <- extract_dhs(questions, add_geo = FALSE) #> Starting Survey 1 out of 3 surveys:CDPR61FL #> Starting Survey 2 out of 3 surveys:TZPR7BFL #> Starting Survey 3 out of 3 surveys:TZPR7IFL  # group our results extract <- rbind_labelled(extract)  # our hv024 variable is now just character strings, so you can decide when/how to factor/label it later str(extract) #> Classes 'dhs_dataset' and 'data.frame':  208595 obs. of  4 variables: #>  $ hv024   : chr  \"equateur\" \"equateur\" \"equateur\" \"equateur\" ... #>   ..- attr(*, \"label\")= chr \"Province\" #>  $ hml35   : chr  NA NA NA NA ... #>   ..- attr(*, \"label\")= chr \"Result of malaria rapid test\" #>  $ SurveyId: chr  \"CD2013DHS\" \"CD2013DHS\" \"CD2013DHS\" \"CD2013DHS\" ... #>  $ DATASET : chr  \"CDPR61FL\" \"CDPR61FL\" \"CDPR61FL\" \"CDPR61FL\" ..."},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/rdhs/reference/as_factor.labelled.html","id":null,"dir":"Reference","previous_headings":"","what":"Archived dataset capable as_factor — as_factor.labelled","title":"Archived dataset capable as_factor — as_factor.labelled","text":"Changes `haven` meant `labelled` class now referred `haven_labelled` classes. `haven::as_factor` used old datasets fail find suitable method. rdhs::as_factor.labelled work old archived datasets `labelled` class.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/as_factor.labelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Archived dataset capable as_factor — as_factor.labelled","text":"","code":"as_factor.labelled(   x,   levels = c(\"default\", \"labels\", \"values\", \"both\"),   ordered = FALSE,   ... )"},{"path":"https://docs.ropensci.org/rdhs/reference/as_factor.labelled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Archived dataset capable as_factor — as_factor.labelled","text":"x Object coerce factor. levels create levels generated factor: \"default\": uses labels available, otherwise values. Labels sorted value. \"\": like \"default\", pastes together level value \"label\": use labels; unlabelled values become NA \"values: use values ordered TRUE create ordered (ordinal) factor, FALSE (default) create regular (nominal) factor. ... arguments passed method.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/as_factor.labelled.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Archived dataset capable as_factor — as_factor.labelled","text":"details see haven::as_factor","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/as_factor.labelled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Archived dataset capable as_factor — as_factor.labelled","text":"","code":"if (FALSE) { # create a data.frame using the new haven_labelled class df1 <- data.frame( area = haven::labelled(c(1L, 2L, 3L), c(\"reg 1\"=1,\"reg 2\"=2,\"reg 3\"=3)), climate = haven::labelled(c(0L, 1L, 1L), c(\"cold\"=0,\"hot\"=1)) )  # manually change it to the old style class(df1$area) <- \"labelled\" class(df1$climate) <- \"labelled\"  # with rdhs attached, i.e. library(rdhs), we can now do the following haven::as_factor(df1$area)  # we can also use this on the data.frame by using the only_labelled argument haven::as_factor(df1, only_labelled = TRUE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/authenticate_dhs.html","id":null,"dir":"Reference","previous_headings":"","what":"DHS Website Authentication — authenticate_dhs","title":"DHS Website Authentication — authenticate_dhs","text":"Authenticate Users DHS website","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/authenticate_dhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DHS Website Authentication — authenticate_dhs","text":"","code":"authenticate_dhs(config)"},{"path":"https://docs.ropensci.org/rdhs/reference/authenticate_dhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DHS Website Authentication — authenticate_dhs","text":"config Object class `rdhs_config` produced `read_rdhs_config` must contain valid `email`, `project` `password`.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/authenticate_dhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DHS Website Authentication — authenticate_dhs","text":"Returns list length 3:  \"user_name\" email usually \"user_pass\" password provided \"proj_id\" project number","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/authenticate_dhs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DHS Website Authentication — authenticate_dhs","text":"user one project contains first   30 characters provided project prompted choose   project want. choice saved   enter R session.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/authenticate_dhs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DHS Website Authentication — authenticate_dhs","text":"Credit function   https://github.com/ajdamico/lodown/blob/master/R/dhs.R","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/available_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of datasets that your log in can download — available_datasets","title":"Create a data frame of datasets that your log in can download — available_datasets","text":"DHS datasets can downloaded","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/available_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of datasets that your log in can download — available_datasets","text":"","code":"available_datasets(   config,   datasets_api_results = NULL,   surveys_api_results = NULL )"},{"path":"https://docs.ropensci.org/rdhs/reference/available_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of datasets that your log in can download — available_datasets","text":"config Object class `rdhs_config` produced `read_rdhs_config` must contain valid `email`, `project` `password`. datasets_api_results Data.table api results datasets   endpoint. Default = NULL generated default declared. surveys_api_results Data.table api results surveys   endpoint. Default = NULL generated default declared.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/available_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of datasets that your log in can download — available_datasets","text":"Returns \"data.frame\" length 14: \"FileFormat\" \"FileSize\" \"DatasetType\" \"SurveyNum\" \"SurveyId\" \"FileType\" \"FileDateLastModified\" \"SurveyYearLabel\" \"SurveyType\" \"SurveyYear\" \"DHS_CountryCode\" \"FileName\" \"CountryName\" \"URLS\"","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/available_datasets.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a data frame of datasets that your log in can download — available_datasets","text":"Inspiration function   https://github.com/ajdamico/lodown/blob/master/R/dhs.R","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/client_cache_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull last cache date — client_cache_date","title":"Pull last cache date — client_cache_date","text":"Pull last cache date","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/client_cache_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull last cache date — client_cache_date","text":"","code":"client_cache_date(root)"},{"path":"https://docs.ropensci.org/rdhs/reference/client_cache_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull last cache date — client_cache_date","text":"root Character root path client, caches, surveys etc. stored.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/client_dhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a dhs client — client_dhs","title":"Make a dhs client — client_dhs","text":"Make DHS API client","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/client_dhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a dhs client — client_dhs","text":"","code":"client_dhs(config = NULL, root = rappdirs_rdhs(), api_key = NULL)"},{"path":"https://docs.ropensci.org/rdhs/reference/client_dhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a dhs client — client_dhs","text":"config config object, created using read_rdhs_config root Character root directory client, caches, surveys etc. stored. Default = rappdirs_rdhs() api_key Character DHS API KEY. Default = NULL","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/client_dhs.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Make a dhs client — client_dhs","text":"dhs_api_request Makes call DHS websites API. can make requests declared api endpoints (see vignette(rdhs) ). API queries can filtered providing query terms, can control many search results want returned. default parameters return results, format nicely data.frame .   N.B. easier now using bespoke functions included within package. take form dhs_<endpoint>, e.g. dhs_data. functions can also take client argument cache response Usage:   dhs_api_request(api_endpoint, query = list(), api_key = private$api_key,       num_results = 100, just_results = TRUE) Arguments: api_endpoint:   API endpoint. Must one 12 possible endpoints. query:   List query filters. see possible query filter terms endpoint head DHS api website. api_key:   DHS API key. Default grab key provided client created. num_results:   Number results return. Default = \"\" loop api search results pages results API allow fetch one page. specify number many results returned (probably best just leave default). just_results:   Boolean whether return just results http API response. Default = TRUE (probably best leave .) Value:   Data.frame search results just_results=TRUE, otherwise nested list API responses page required. available_datasets Searches DHS website datasets can download. results function cached client. recently requested new datasets DHS website can specify clear cache first get new set datasets available . Usage:   available_datasets(clear_cache_first = FALSE) Arguments: clear_cache_first:   Boolean detailing like clear cached available datasets first. default set FALSE. option available can make sure client fetches new datasets recently given access . Value:   Data.frame object 14 variables detail surveys can download, url download links country, survey, year etc info link. get_datasets Gets datasets cache downloads DHS website. providing filenames, specified one returned fields dhs_datasets, client log download files requested. requested files unavailable log , flagged first message can make note request DHS website. also option control whether downloaded zip file extracted converted convenient R data.frame. converted object subsequently saved \".rds\" object within client root directory datasets folder, can quickly loaded needed readRDS. also option reformat dataset, ensure suitable parser used preserve meta information dataset, different survey response codes mean. Usage:   get_datasets(dataset_filenames, download_option = \"rds\", reformat = FALSE,       all_lower = TRUE, output_dir_root = file.path(private$root,           \"datasets\"), clear_cache = FALSE, ...) Arguments: dataset_filenames:   desired filenames downloaded. can found one returned fields dhs_datasets. Alternatively can also pass desired rows dhs_datasets. download_option:   Character specifying whether dataset just downloaded (\"zip\"), imported saved .rds object (\"rds\"), extract rds (\"\"). Conveniently can just specify letter options. reformat:   Boolean concerning whether reformat read datasets removing factors labels. Default = FALSE. all_lower:   Logical indicating whether value labels lower case. Default `TRUE`. output_dir_root:   Root directory datasets stored within. default download datasets subfolder client root called \"datasets\" clear_cache:   available datasets cache cleared first. allow newly accessed datasets available. Default = `TRUE` ...:   arguments passed read_dhs_dataset Value:   Depends download_option requested, ultimately file path dataset downloaded , can interact accordingly. survey_questions Use function download_survey query downloaded surveys questions asked. function look downloaded imported survey datasets cache, download previously downloaded. Usage:   survey_questions(dataset_filenames, search_terms = NULL, essential_terms = NULL,       regex = NULL, rm_na = TRUE, ...) Arguments: dataset_filenames:   desired filenames downloaded. can found one returned fields dhs_datasets. search_terms:   Character vector search terms. terms found within surveys question descriptions, corresponding code description returned. essential_terms:   Character pattern description survey questions. .e. function first find survey_questions contain search terms (regex) essential_terms. remove questions contain essential_terms. Default = NULL. regex:   Regex character pattern matching. want specify regex search pattern, specify argument. N.B. search_terms regex supplied arguments regex ignored. rm_na:   NAs removed. Default `TRUE` ...:   arguments passed download_datasets Value:   Data frame surveys matches found resultant codes descriptions. survey_variables Use function download_survey look surveys provided codes. Usage:   survey_variables(dataset_filenames, variables, essential_variables = NULL,       rm_na = TRUE, ...) Arguments: dataset_filenames:   desired filenames downloaded. can found one returned fields dhs_datasets. variables:   Character vector survey variables looked essential_variables:   Character vector variables need present. codes present survey, survey returned function. Default = NULL. rm_na:   NAs removed. Default `TRUE` ...:   arguments passed download_datasets Value:   Data frame surveys matches found resultant codes descriptions. extract Function extract datasets using set survey questions taken output survey_questions Usage:   extract(questions, add_geo = FALSE) Arguments: questions:   Questions queried, format survey_questions add_geo:   Add geographic information extract. Default = TRUE get_variable_labels Returns information dataset's survey variables definitions. Usage:   get_variable_labels(dataset_filenames = NULL, dataset_paths = NULL, rm_na = FALSE) Arguments: dataset_filenames:   Vector dataset filenames look dataset_paths:   Vector dataset file paths datasets saved rm_na:   variables labels NAs removed. Default = FALSE Value:   Data frame survey variable names definitions get_cache_date Returns private member variable cache-date, date client last created/validated DHS API. Usage:   get_cache_date() Value:   POSIXct POSIXt time get_root Returns file path client's root directory Usage:   get_root() Value:   Character string file path get_config Returns client's configuration Usage:   get_config() Value:   Config data.frame get_downloaded_datasets Returns named list downloaded datasets file paths Usage:   get_downloaded_datasets() Value:   List dataset names file paths. set_cache_date Sets private member variable cache-date, date client last created/validated DHS API. never really needed included demonstrate cache clearing properties client vignette. Usage:   set_cache_date(date) Arguments: date:   POSIXct POSIXt time update cache time . save_client Internally save client object .rds file within root directory client. Usage:   save_client() clear_namespace Clear keys values associated within cache context. dhs client caches number different tasks, places within specific contexts using package storr::storr_rds. Usage:   clear_namespace(namespace) Arguments: namespace:   Character string namespace cleared.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/client_dhs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a dhs client — client_dhs","text":"","code":"if (FALSE) { # create an rdhs config file at \"rdhs.json\" conf <- set_rdhs_config( config_path = \"rdhs.json\",global = FALSE, prompt = FALSE ) td <- tempdir() cli <- rdhs::client_dhs(api_key = \"DEMO_1234\", config = conf, root = td) }"},{"path":"https://docs.ropensci.org/rdhs/reference/collapse_api_responses.html","id":null,"dir":"Reference","previous_headings":"","what":"collapse API response list — collapse_api_responses","title":"collapse API response list — collapse_api_responses","text":"collapse API response list","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/collapse_api_responses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"collapse API response list — collapse_api_responses","text":"","code":"collapse_api_responses(x)"},{"path":"https://docs.ropensci.org/rdhs/reference/collapse_api_responses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"collapse API response list — collapse_api_responses","text":"x List lists API collapsed","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/data_and_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create list of dataset and its variable names — data_and_labels","title":"Create list of dataset and its variable names — data_and_labels","text":"Function give former output get_datasets can nice definitions dataset attached together","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/data_and_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create list of dataset and its variable names — data_and_labels","text":"","code":"data_and_labels(dataset)"},{"path":"https://docs.ropensci.org/rdhs/reference/data_and_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create list of dataset and its variable names — data_and_labels","text":"dataset read dataset created get_datasets, either file path read using readRDS","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/data_and_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create list of dataset and its variable names — data_and_labels","text":"","code":"if (FALSE) { # get the model datasets included with the package model_datasets <- model_datasets  # download one of them g <- get_datasets(dataset_filenames = model_datasets$FileName[1]) dl <- data_and_labels(g$zzbr62dt)  # now we easily have our survey question labels easily accessible grep(\"bed net\", dl$variable_names$description, value = TRUE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/delabel_df.html","id":null,"dir":"Reference","previous_headings":"","what":"convert labelled data frame to data frame of just characters — delabel_df","title":"convert labelled data frame to data frame of just characters — delabel_df","text":"convert labelled data frame data frame just characters","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/delabel_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert labelled data frame to data frame of just characters — delabel_df","text":"","code":"delabel_df(df)"},{"path":"https://docs.ropensci.org/rdhs/reference/delabel_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert labelled data frame to data frame of just characters — delabel_df","text":"df data frame convert labelled elements . Likely output extract_dhs.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/delabel_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert labelled data frame to data frame of just characters — delabel_df","text":"data frame de-labelled elements","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/delabel_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert labelled data frame to data frame of just characters — delabel_df","text":"","code":"df1 <- data.frame( area = haven::labelled(c(1L, 2L, 3L), c(\"reg 1\"=1,\"reg 2\"=2,\"reg 3\"=3)), climate = haven::labelled(c(0L, 1L, 1L), c(\"cold\"=0,\"hot\"=1)) )  df_char <- delabel_df(df = df1)"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Countries — dhs_countries","title":"API request of DHS Countries — dhs_countries","text":"API request DHS Countries","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Countries — dhs_countries","text":"","code":"dhs_countries(   countryIds = NULL,   indicatorIds = NULL,   surveyIds = NULL,   surveyYear = NULL,   surveyYearStart = NULL,   surveyYearEnd = NULL,   surveyType = NULL,   surveyCharacteristicIds = NULL,   tagIds = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_countries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Countries — dhs_countries","text":"countryIds Specify comma separated list country ids filter   . list countries use dhs_countries(returnFields=c(\"CountryName\",\"DHS_CountryCode\")) indicatorIds Specify comma separated list indicators ids   filter . list indicators use dhs_indicators(returnFields=c(\"IndicatorId\",\"Label\",\"Definition\")) surveyIds Specify comma separated list survey ids filter . list surveys use dhs_surveys(returnFields=c(\"SurveyId\", \"SurveyYearLabel\",\"SurveyType\",\"CountryName\")) surveyYear Specify comma separated list survey years filter . surveyYearStart Specify range Survey Years filter Countries . surveyYearStart inclusive value. Can used alone conjunction surveyYearEnd. surveyYearEnd Specify range Survey Years filter Countries . surveyYearEnd inclusive value. Can used alone conjunction surveyYearStart. surveyType Specify survey type filter . surveyCharacteristicIds Specify survey characteristic id filter countries surveys specified survey characteristic. list survey characteristics use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\", \"SurveyType\",\"CountryName\")) tagIds Specify tag id filter countries surveys containing indicators specified tag. list tags use dhs_tags() f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_countries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Countries — dhs_countries","text":"Returns data.table 12 (less returnFields provided)   countries corresponding details. detailed description   attributes returned provided  https://api.dhsprogram.com/rest/dhs/countries/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Countries — dhs_countries","text":"","code":"if (FALSE) { # A common use for the countries API endpoint is to query which countries # ask questions about a given topic. For example to find all countries that # record data on malaria prevalence by RDT:  dat <- dhs_countries(indicatorIds = \"ML_PMAL_C_RDT\")  # Additionally you may want to know all the countries that have conducted # MIS (malaria indicator surveys):  dat <- dhs_countries(surveyType=\"MIS\")  # A complete list of examples for how each argument to the countries API # endpoint can be provided is given below, which is a copy of each of # the examples listed in the API at:  # https://api.dhsprogram.com/#/api-countries.cfm   dat <- dhs_countries(countryIds=\"EG\",all_results=FALSE) dat <- dhs_countries(indicatorIds=\"FE_FRTR_W_TFR\",all_results=FALSE) dat <- dhs_countries(surveyIds=\"SN2010DHS\",all_results=FALSE) dat <- dhs_countries(surveyYear=\"2010\",all_results=FALSE) dat <- dhs_countries(surveyYearStart=\"2006\",all_results=FALSE) dat <- dhs_countries(surveyYearStart=\"1991\", surveyYearEnd=\"2006\", all_results=FALSE) dat <- dhs_countries(surveyType=\"DHS\",all_results=FALSE) dat <- dhs_countries(surveyCharacteristicIds=\"32\",all_results=FALSE) dat <- dhs_countries(tagIds=\"1\",all_results=FALSE) dat <- dhs_countries(f=\"html\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_data.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Indicator Data — dhs_data","title":"API request of DHS Indicator Data — dhs_data","text":"API request DHS Indicator Data","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Indicator Data — dhs_data","text":"","code":"dhs_data(   countryIds = NULL,   indicatorIds = NULL,   surveyIds = NULL,   selectSurveys = NULL,   surveyYear = NULL,   surveyYearStart = NULL,   surveyYearEnd = NULL,   surveyType = NULL,   surveyCharacteristicIds = NULL,   characteristicCategory = NULL,   characteristicLabel = NULL,   tagIds = NULL,   breakdown = NULL,   returnGeometry = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Indicator Data — dhs_data","text":"countryIds Specify comma separated list country ids filter   . list countries use dhs_countries(returnFields=c(\"CountryName\",\"DHS_CountryCode\")) indicatorIds Specify comma separated list indicator ids   filter . list indicators use dhs_indicators(returnFields=c(\"IndicatorId\",\"Label\",\"Definition\")) surveyIds Specify comma separated list survey ids filter .   list surveys use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\",   \"SurveyType\",\"CountryName\")) selectSurveys Specify filter Data latest survey adding `selectSurveys=\"latest\"` conjunction Country Code /Survey Type. Please Note: indicators present latest surveys. filter API Indicator Data call return latest survey data specific set indicators present, add `selectSurveys=\"byIndicator\"` conjunction Indicator IDs, Country Code, /Survey Type instead using `selectSurveys=\"latest\"` surveyYear Specify comma separated list survey years filter . surveyYearStart Specify range Survey Years filter Data . surveyYearStart inclusive value. Can used alone conjunction surveyYearEnd. surveyYearEnd Specify range Survey Years filter Data . surveyYearEnd inclusive value. Can used alone conjunction surveyYearStart. surveyType Specify survey type filter . surveyCharacteristicIds Specify survey characteristic id filter   data surveys specified survey characteristic. list   survey characteristics use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\",   \"SurveyType\",\"CountryName\")) characteristicCategory Specify survey characteristic category filter data surveys specified survey characteristic category. query case insensitive, recognizes exact phrase matches. example, `characteristicCategory=\"wealth\"` return results characteristic category `Wealth` `characteristicCategory=\"wealth quintile\"' return results characteristic category `Wealth Quintile`. characteristicLabel Specify survey characteristic category filter data surveys specified survey characteristic category. query case insensitive, recognizes exact phrase matches. can use characteristicLabel conjunction characteristicCategory. tagIds Specify tag id filter data indicators specified tag. list tags use dhs_tags() breakdown Data can requested different levels via breakdown parameter. default national data returned provides totals national level. `breakdown=\"subnational\"` data provides values subnational level. `breakdown=\"background\"` provides totals categorized basis. Examples urban/rural, education wealth level. `breakdown=\"\"` provides data including disaggregated data. returnGeometry Coordinates can requested API including `returnGeometry=TRUE` request. default value false. f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Indicator Data — dhs_data","text":"Returns data.table 27 (less returnFields provided)   data particular query. Details properties returned   row data provided https://api.dhsprogram.com/rest/dhs/data/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Indicator Data — dhs_data","text":"","code":"if (FALSE) { # A common use for the indicator data API will be to search for a specific # health indicator for a given country. For example to return the total # malaria prevalence according to RDT, given by the indicator ML_PMAL_C_RDT, # in Senegal since 2010:  dat <- dhs_data( indicatorIds=\"ML_PMAL_C_RDT\", countryIds=\"SN\", surveyYearStart=\"2006\" )  # A complete list of examples for how each argument to the data api # endpoint can be provided is given below, which is a copy of each of # the examples listed in the API at:  # https://api.dhsprogram.com/#/api-data.cfm   dat <- dhs_data(countryIds=\"EG\",all_results=FALSE) dat <- dhs_data(indicatorIds=\"FE_FRTR_W_TFR\",all_results=FALSE) dat <- dhs_data(surveyIds=\"SN2010DHS\",all_results=FALSE) dat <- dhs_data(selectSurveys=\"latest\",all_results=FALSE) dat <- dhs_data(selectSurveys=\"byIndicator\", indicatorIds=\"FE_CEBA_W_CH0\", all_results=FALSE) dat <- dhs_data(surveyYear=\"2010\",all_results=FALSE) dat <- dhs_data(surveyYearStart=\"2006\",all_results=FALSE) dat <- dhs_data(surveyYearStart=\"1991\", surveyYearEnd=\"2006\", all_results=FALSE) dat <- dhs_data(surveyType=\"DHS\",all_results=FALSE) dat <- dhs_data(surveyCharacteristicIds=\"32\",all_results=FALSE) dat <- dhs_data(characteristicCategory=\"wealth quintile\",all_results=FALSE) dat <- dhs_data(breakdown=\"all\", countryIds=\"AZ\", characteristicLabel=\"6+\", all_results=FALSE) dat <- dhs_data(tagIds=\"1\",all_results=FALSE) dat <- dhs_data(breakdown=\"subnational\",all_results=FALSE) dat <- dhs_data(breakdown=\"background\",all_results=FALSE) dat <- dhs_data(breakdown=\"all\",all_results=FALSE) dat <- dhs_data(f=\"html\",all_results=FALSE) dat <- dhs_data(f=\"geojson\", returnGeometry=\"true\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_data_updates.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Data Updates — dhs_data_updates","title":"API request of DHS Data Updates — dhs_data_updates","text":"API request DHS Data Updates","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_data_updates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Data Updates — dhs_data_updates","text":"","code":"dhs_data_updates(   lastUpdate = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_data_updates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Data Updates — dhs_data_updates","text":"lastUpdate Specify date Unix time filter updates . results data updated specified date returned. f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_data_updates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Data Updates — dhs_data_updates","text":"Returns data.table 9 (less returnFields provided)   indicators surveys added/updated removed. detailed   description attributes returned provided  https://api.dhsprogram.com/rest/dhs/dataupdates/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_data_updates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Data Updates — dhs_data_updates","text":"","code":"if (FALSE) { # The API endpoint for the data updates available within the DHS # is a very useful endpoint, which is used a lot within `rdhs`. For example, # we use it to keep the end user's cache up to date. For example to find all # updates that have occurred in 2018:  dat <- dhs_data_updates(lastUpdate=\"20180101\")  # A complete list of examples for how each argument to the data updates # API endpoint can be provided is given below, which is a # copy of each of the examples listed in the API at:  # https://api.dhsprogram.com/#/api-dataupdates.cfm   dat <- dhs_data_updates(lastUpdate=\"20150901\",all_results=FALSE) dat <- dhs_data_updates(f=\"html\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Datasets — dhs_datasets","title":"API request of DHS Datasets — dhs_datasets","text":"API request DHS Datasets","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Datasets — dhs_datasets","text":"","code":"dhs_datasets(   countryIds = NULL,   selectSurveys = NULL,   surveyIds = NULL,   surveyYear = NULL,   surveyYearStart = NULL,   surveyYearEnd = NULL,   surveyType = NULL,   fileFormat = NULL,   fileType = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Datasets — dhs_datasets","text":"countryIds Specify comma separated list country ids filter . list countries use dhs_countries(returnFields=c(\"CountryName\",\"DHS_CountryCode\")) selectSurveys Specify filter data latest survey including `selectSurveys=TRUE` request. Note: Please use parameter conjunction countryCode, surveyType, indicatorIds best results. surveyIds Specify comma separated list survey ids filter . list surveys use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\", \"SurveyType\",\"CountryName\")) surveyYear Specify comma separated list survey years filter . surveyYearStart Specify range Survey Years filter Datasets . surveyYearStart inclusive value. Can used alone conjunction surveyYearEnd. surveyYearEnd Specify range Survey Years filter Datasets . surveyYearEnd inclusive value. Can used alone conjunction surveyYearStart. surveyType Specify survey type filter . fileFormat Specify file format survey. Can use file format type name (SAS, Stata, SPSS, Flat, Hierarchical) file format code. View list file format codes - https://dhsprogram.com/data/File-Types--Names.cfm fileType Specify type dataset generated survey (e.g. household, women, men, children, couples, etc.). View list file type codes - https://dhsprogram.com/data/File-Types--Names.cfm f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Datasets — dhs_datasets","text":"Returns data.table 13 (less returnFields provided)   datasets corresponding details. detailed description   attributes returned provided  https://api.dhsprogram.com/rest/dhs/datasets/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Datasets — dhs_datasets","text":"","code":"if (FALSE) { # The API endpoint for the datasets available within the DHS website # is a very useful endpoint, which is used a lot within `rdhs`. For example, # it is used to find the file names and size of the dataset files, as well # as when they were last modified. This enables us to see which datasets # have been updated and may thus be out of date. For example to find all # datasets that have been modified in 2018:  dat <- dhs_datasets() dates <- rdhs:::mdy_hms(dat$FileDateLastModified) years <- as.POSIXlt(dates, tz = tz(dates))$year + 1900 modified_in_2018 <- which(years == 2018)  # A complete list of examples for how each argument to the datasets # API endpoint can be provided is given below, which is a # copy of each of the examples listed in the API at:  # https://api.dhsprogram.com/#/api-datasets.cfm   dat <- dhs_datasets(countryIds=\"EG\",all_results=FALSE) dat <- dhs_datasets(selectSurveys=\"latest\",all_results=FALSE) dat <- dhs_datasets(surveyIds=\"SN2010DHS\",all_results=FALSE) dat <- dhs_datasets(surveyYear=\"2010\",all_results=FALSE) dat <- dhs_datasets(surveyYearStart=\"2006\",all_results=FALSE) dat <- dhs_datasets(surveyYearStart=\"1991\", surveyYearEnd=\"2006\", all_results=FALSE) dat <- dhs_datasets(surveyType=\"DHS\",all_results=FALSE) dat <- dhs_datasets(fileFormat=\"stata\",all_results=FALSE) dat <- dhs_datasets(fileFormat=\"DT\",all_results=FALSE) dat <- dhs_datasets(fileType=\"KR\",all_results=FALSE) dat <- dhs_datasets(f=\"geojson\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Geometry — dhs_geometry","title":"API request of DHS Geometry — dhs_geometry","text":"API request DHS Geometry","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Geometry — dhs_geometry","text":"","code":"dhs_geometry(   countryIds = NULL,   surveyIds = NULL,   surveyYear = NULL,   surveyYearStart = NULL,   surveyYearEnd = NULL,   surveyType = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Geometry — dhs_geometry","text":"countryIds Specify comma separated list country ids filter . list countries use dhs_countries(returnFields=c(\"CountryName\",\"DHS_CountryCode\")) surveyIds Specify comma separated list survey ids filter . list surveys use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\", \"SurveyType\",\"CountryName\")) surveyYear Specify comma separated list survey years filter . surveyYearStart Specify range Survey Years filter Geometry . surveyYearStart inclusive value. Can used alone conjunction surveyYearEnd. surveyYearEnd Specify range Survey Years filter Geometry . surveyYearEnd inclusive value. Can used alone conjunction surveyYearStart. surveyType Specify survey type filter . f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Geometry — dhs_geometry","text":"Returns data.table 7 (less returnFields provided)   geometry corresponding details. detailed description   attributes returned provided  https://api.dhsprogram.com/rest/dhs/geometry/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Geometry — dhs_geometry","text":"","code":"if (FALSE) { # The geometry API endpoint returns the spatial geometry for countries, and # can then be used to recreate the spatial polygon for a given country. For # example to return the coordinates for the Senegal 2010 DHS survey:  dat <- dhs_geometry(surveyIds=\"SN2010DHS\")  # At the moment there is no function to convert the coordinates returned by # the API but this will be in the next version of rdhs. For those interested # look at the geojson vignette for an alternative way to produce plots.  # A complete list of examples for how each argument to the geometry # API endpoint can be provided is given below, which is a # copy of each of the examples listed in the API at:  # https://api.dhsprogram.com/#/api-geometry.cfm   dat <- dhs_geometry(countryIds=\"EG\",all_results=FALSE) dat <- dhs_geometry(surveyIds=\"SN2010DHS\",all_results=FALSE) dat <- dhs_geometry(surveyYear=\"2010\",all_results=FALSE) dat <- dhs_geometry(surveyYearStart=\"2006\",all_results=FALSE) dat <- dhs_geometry(surveyYearStart=\"1991\", surveyYearEnd=\"2006\", all_results=FALSE) dat <- dhs_geometry(surveyType=\"DHS\",all_results=FALSE) dat <- dhs_geometry(f=\"geojson\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_gps_data_format.html","id":null,"dir":"Reference","previous_headings":"","what":"DHS GPS Data Format — dhs_gps_data_format","title":"DHS GPS Data Format — dhs_gps_data_format","text":"Data frame describe data encoded DHS GPS files","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_gps_data_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DHS GPS Data Format — dhs_gps_data_format","text":"","code":"data(dhs_gps_data_format)"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_gps_data_format.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DHS GPS Data Format — dhs_gps_data_format","text":"dataframe 20 observations 3 variables: dhs_gps_data_format: dataframe GPS data descriptions. \"Name\" \"Type\" \"Description\"","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Indicators — dhs_indicators","title":"API request of DHS Indicators — dhs_indicators","text":"API request DHS Indicators","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Indicators — dhs_indicators","text":"","code":"dhs_indicators(   countryIds = NULL,   indicatorIds = NULL,   surveyIds = NULL,   surveyYear = NULL,   surveyYearStart = NULL,   surveyYearEnd = NULL,   surveyType = NULL,   surveyCharacteristicIds = NULL,   tagIds = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_indicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Indicators — dhs_indicators","text":"countryIds Specify comma separated list country ids filter   . list countries use dhs_countries(returnFields=c(\"CountryName\",\"DHS_CountryCode\")) indicatorIds Specify comma separated list indicators ids   filter . list indicators use dhs_indicators(returnFields=c(\"IndicatorId\",\"Label\",\"Definition\")) surveyIds Specify comma separated list survey ids filter .   list surveys use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\",   \"SurveyType\",\"CountryName\")) surveyYear Specify survey year filter . surveyYearStart Specify range Survey Years filter Indicators . surveyYearStart inclusive value. Can used alone conjunction surveyYearEnd. surveyYearEnd Specify range Survey Years filter Indicators . surveyYearEnd inclusive value. Can used alone conjunction surveyYearStart. surveyType Specify comma separated list survey years filter . surveyCharacteristicIds Specify survey characteristic id filter indicators surveys specified survey characteristic. list survey characteristics use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\", \"SurveyType\",\"CountryName\")) tagIds Specify tag id filter indicators specified tag. list tags use dhs_tags() f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_indicators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Indicators — dhs_indicators","text":"Returns data.table 18 (less returnFields provided)   indicators attributes indicator. detailed description   attributes returned provided  https://api.dhsprogram.com/rest/dhs/indicators/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Indicators — dhs_indicators","text":"","code":"if (FALSE) { # A common use for the indicators data API will be to search for a list of # health indicators within a given characteristic category, such as anemia # testing, HIV prevalence, micronutrients etc. For example to return all the # indicators relating to malaria testing by RDTs:  dat <- dhs_indicators(surveyCharacteristicIds=\"90\")  # A list of the different `surveyCharacteristicIds` can be found # [here](https://api.dhsprogram.com/rest/dhs/surveycharacteristics?f=html)  # A complete list of examples for how each argument to the indicator API # endpoint can be provided is given below, which is a copy of each of # the examples listed in the API at:  # https://api.dhsprogram.com/#/api-indicators.cfm   dat <- dhs_indicators(countryIds=\"EG\",all_results=FALSE) dat <- dhs_indicators(indicatorIds=\"FE_FRTR_W_TFR\",all_results=FALSE) dat <- dhs_indicators(surveyIds=\"SN2010DHS\",all_results=FALSE) dat <- dhs_indicators(surveyYear=\"2010\",all_results=FALSE) dat <- dhs_indicators(surveyYearStart=\"2006\",all_results=FALSE) dat <- dhs_indicators(surveyYearStart=\"1991\", surveyYearEnd=\"2006\", all_results=FALSE) dat <- dhs_indicators(surveyType=\"DHS\",all_results=FALSE) dat <- dhs_indicators(surveyCharacteristicIds=\"32\",all_results=FALSE) dat <- dhs_indicators(tagIds=\"1\",all_results=FALSE) dat <- dhs_indicators(f=\"html\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_info.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Info — dhs_info","title":"API request of DHS Info — dhs_info","text":"API request DHS Info","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Info — dhs_info","text":"","code":"dhs_info(   infoType = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Info — dhs_info","text":"infoType Specify type info obtain information requested. Default version. `infoType=\"version\"`` (default) Provides version API. Example: https://api.dhsprogram.com/rest/dhs/info?infoType=version `infoType=\"citation\"` Provides citation API include application data. Example: https://api.dhsprogram.com/rest/dhs/info?infoType=citation f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Info — dhs_info","text":"Returns data.table 2 (less returnFields provided)   fields describing type information requested value   corresponding information requested.  https://api.dhsprogram.com/rest/dhs/info/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Info — dhs_info","text":"","code":"if (FALSE) { # The main use for the info API  will be to confirm the version of the API # being used to providing the most current citation for the data.  dat <- dhs_info(infoType=\"version\")  # A complete list of examples for how each argument to the info API # endpoint can be provided is given below, which is a copy of each of # the examples listed in the API at:  # https://api.dhsprogram.com/#/api-info.cfm   dat <- dhs_info(infoType=\"version\",all_results=FALSE) dat <- dhs_info(infoType=\"citation\",all_results=FALSE) dat <- dhs_info(f=\"html\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_publications.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Publications — dhs_publications","title":"API request of DHS Publications — dhs_publications","text":"API request DHS Publications","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_publications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Publications — dhs_publications","text":"","code":"dhs_publications(   countryIds = NULL,   selectSurveys = NULL,   indicatorIds = NULL,   surveyIds = NULL,   surveyYear = NULL,   surveyYearStart = NULL,   surveyYearEnd = NULL,   surveyType = NULL,   surveyCharacteristicIds = NULL,   tagIds = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_publications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Publications — dhs_publications","text":"countryIds Specify comma separated list country ids filter . list countries use dhs_countries(returnFields=c(\"CountryName\",\"DHS_CountryCode\")) selectSurveys Specify filter data latest survey including `selectSurveys=TRUE` request. Note: Please use parameter conjunction countryCode, surveyType, indicatorIds best results. indicatorIds Specify comma separated list indicators ids filter . list indicators use dhs_indicators(returnFields=c(\"IndicatorId\",\"Label\",\"Definition\")) surveyIds Specify comma separated list survey ids filter . list surveys use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\", \"SurveyType\",\"CountryName\")) surveyYear Specify comma separated list survey years filter . surveyYearStart Specify range Survey Years filter Publications . surveyYearStart inclusive value. Can used alone conjunction surveyYearEnd. surveyYearEnd Specify range Survey Years filter Publications . surveyYearEnd inclusive value. Can used alone conjunction surveyYearStart. surveyType Specify survey type filter . surveyCharacteristicIds Specify survey characteristic id filter publications countries specified survey characteristics. list survey characteristics use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\", \"SurveyType\",\"CountryName\")) tagIds Specify tag id filter publications surveys containing indicators specified tag. list tags use dhs_tags() f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_publications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Publications — dhs_publications","text":"Returns data.table 10 (less returnFields provided)   publications detailed information publication. detailed   description attributes returned provided  https://api.dhsprogram.com/rest/dhs/publications/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_publications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Publications — dhs_publications","text":"","code":"if (FALSE) { # A main use for the publications API endpoint is to find which surveys have # a published report resulting from the conducted survey:  dat <- dhs_publications()  # A complete list of examples for how each argument to the publications # API endpoint can be provided is given below, which is a # copy of each of the examples listed in the API at:  # https://api.dhsprogram.com/#/api-publications.cfm   dat <- dhs_publications(countryIds=\"EG\",all_results=FALSE) dat <- dhs_publications(selectSurveys=\"latest\",all_results=FALSE) dat <- dhs_publications(indicatorIds=\"FE_FRTR_W_TFR\",all_results=FALSE) dat <- dhs_publications(surveyIds=\"SN2010DHS\",all_results=FALSE) dat <- dhs_publications(surveyYear=\"2010\",all_results=FALSE) dat <- dhs_publications(surveyYearStart=\"2006\",all_results=FALSE) dat <- dhs_publications(surveyYearStart=\"1991\", surveyYearEnd=\"2006\", all_results=FALSE) dat <- dhs_publications(surveyType=\"DHS\",all_results=FALSE) dat <- dhs_publications(surveyCharacteristicIds=\"32\",all_results=FALSE) dat <- dhs_publications(tagIds=1,all_results=FALSE) dat <- dhs_publications(f=\"html\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_survey_characteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Survey Characteristics — dhs_survey_characteristics","title":"API request of DHS Survey Characteristics — dhs_survey_characteristics","text":"API request DHS Survey Characteristics","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_survey_characteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Survey Characteristics — dhs_survey_characteristics","text":"","code":"dhs_survey_characteristics(   countryIds = NULL,   indicatorIds = NULL,   surveyIds = NULL,   surveyYear = NULL,   surveyYearStart = NULL,   surveyYearEnd = NULL,   surveyType = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_survey_characteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Survey Characteristics — dhs_survey_characteristics","text":"countryIds Specify comma separated list country ids filter . list countries use dhs_countries(returnFields=c(\"CountryName\",\"DHS_CountryCode\")) indicatorIds Specify comma separated list indicators ids filter . list indicators use dhs_indicators(returnFields=c(\"IndicatorId\",\"Label\",\"Definition\")) surveyIds Specify comma separated list survey ids filter . list surveys use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\", \"SurveyType\",\"CountryName\")) surveyYear Specify comma separated list survey years filter . surveyYearStart Specify range Survey Years filter Survey Characteristics . surveyYearStart inclusive value. Can used alone conjunction surveyYearEnd. surveyYearEnd Specify range Survey Years filter Survey Characteristics . surveyYearEnd inclusive value. Can used alone conjunction surveyYearStart. surveyType Specify survey type filter . f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_survey_characteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Survey Characteristics — dhs_survey_characteristics","text":"Returns data.table 2 (less returnFields provided)   survey characteristics. survey can labelled one   survey characteristics. description attributes returned   provided  https://api.dhsprogram.com/rest/dhs/surveycharacteristics/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_survey_characteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Survey Characteristics — dhs_survey_characteristics","text":"","code":"if (FALSE) { # A good use for the survey characteristics API endpoint is to query what the # IDs are for each survey characteristic. These are useful for passing as # arguments to other API endpoints.For example to show all the ids:  dat <- dhs_survey_characteristics()  # Or if your analysis is foucssed on a particular country, and you want to # see all the characteristics surveyed for e.g. Senegal  dat <- dhs_countries(countryIds=\"SN\")  # A complete list of examples for how each argument to the survey # characteristics API endpoint can be provided is given below, which is a # copy of each of the examples listed in the API at:  # https://api.dhsprogram.com/#/api-surveycharacteristics.cfm   dat <- dhs_survey_characteristics(countryIds=\"EG\",all_results=FALSE) dat <- dhs_survey_characteristics(indicatorIds=\"FE_FRTR_W_TFR\", all_results=FALSE) dat <- dhs_survey_characteristics(surveyIds=\"SN2010DHS,all_results=FALSE\") dat <- dhs_survey_characteristics(surveyYear=\"2010,all_results=FALSE\") dat <- dhs_survey_characteristics(surveyYearStart=\"2006\",all_results=FALSE) dat <- dhs_survey_characteristics(surveyYearStart=\"1991\", surveyYearEnd=\"2006\",all_results=FALSE) dat <- dhs_survey_characteristics(surveyType=\"DHS\",all_results=FALSE) dat <- dhs_survey_characteristics(f=\"html\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_surveys.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Surveys — dhs_surveys","title":"API request of DHS Surveys — dhs_surveys","text":"API request DHS Surveys","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_surveys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Surveys — dhs_surveys","text":"","code":"dhs_surveys(   countryIds = NULL,   indicatorIds = NULL,   selectSurveys = NULL,   surveyIds = NULL,   surveyYear = NULL,   surveyYearStart = NULL,   surveyYearEnd = NULL,   surveyType = NULL,   surveyStatus = NULL,   surveyCharacteristicIds = NULL,   tagIds = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_surveys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Surveys — dhs_surveys","text":"countryIds Specify comma separated list country ids filter . list countries use  dhs_countries(returnFields=c(\"CountryName\",\"DHS_CountryCode\")) indicatorIds Specify comma separated list indicators ids filter . list indicators use dhs_indicators(returnFields=c(\"IndicatorId\",\"Label\",\"Definition\")) selectSurveys Specify filter data latest survey including `selectSurveys=TRUE` request. Note: Please use parameter conjunction countryCode, surveyType, indicatorIds best results. surveyIds Specify comma separated list survey ids filter . list surveys use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\", \"SurveyType\",\"CountryName\")) surveyYear Specify comma separated list survey years filter . surveyYearStart Specify range Survey Years filter Surveys . surveyYearStart inclusive value. Can used alone conjunction surveyYearEnd. surveyYearEnd Specify range Survey Years filter Surveys . surveyYearEnd inclusive value. Can used alone conjunction surveyYearStart. surveyType Specify survey type filter . surveyStatus Every survey assigned surveys status can queried based surveyStatus parameter. `surveyStatus=\"available\"` (default) provides list surveys DHS API contains Indicator Data. `surveyStatus=\"Completed\"` provides list completed surveys. NOTE: Data may available every completed survey. `surveyStatus=\"Ongoing\"` provides list ongoing surveys. `surveyStatus=\"\"` provides list surveys. surveyCharacteristicIds Specify survey characteristic id filter surveys specified survey characteristic. list survey characteristics use dhs_surveys(returnFields=c(\"SurveyId\", \"SurveyYearLabel\",\"SurveyType\",\"CountryName\")) tagIds Specify tag id filter surveys containing indicators specified tag. list tags use dhs_tags() f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_surveys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Surveys — dhs_surveys","text":"Returns data.table 28 (less returnFields provided)   surveys detailed information survey. detailed description   attributes returned provided  https://api.dhsprogram.com/rest/dhs/surveys/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_surveys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Surveys — dhs_surveys","text":"","code":"if (FALSE) { # A common use for the surveys API endpoint is to query which countries # have conducted surveys since a given year, e.g. since 2010  dat <- dhs_surveys(surveyYearStart=\"2010\")  # Additionally, some countries conduct non DHS surveys, but the data for # thse is also available within the DHS website/API. To query these:  dat <- dhs_surveys(surveyType=\"MIS\")  # Lastly, you may be interested to know about anything peculiar about a # particular survey's implementation. This can be found by looking within # the footnotes variable within the data frame returned. For example, the # Madagascar 2013 MIS:  dat$Footnotes[dat$SurveyId == \"MD2013MIS\"]  # A complete list of examples for how each argument to the surveys API # endpoint can be provided is given below, which is a copy of each of # the examples listed in the API at:  # https://api.dhsprogram.com/#/api-surveys.cfm   dat <- dhs_surveys(countryIds=\"EG\",all_results=FALSE) dat <- dhs_surveys(indicatorIds=\"FE_FRTR_W_TFR\",all_results=FALSE) dat <- dhs_surveys(selectSurveys=\"latest\",all_results=FALSE) dat <- dhs_surveys(surveyIds=\"SN2010DHS\",all_results=FALSE) dat <- dhs_surveys(surveyYear=\"2010\",all_results=FALSE) dat <- dhs_surveys(surveyYearStart=\"2006\",all_results=FALSE) dat <- dhs_surveys(surveyYearStart=\"1991\", surveyYearEnd=\"2006\", all_results=FALSE) dat <- dhs_surveys(surveyType=\"DHS\",all_results=FALSE) dat <- dhs_surveys(surveyStatus=\"Surveys\",all_results=FALSE) dat <- dhs_surveys(surveyStatus=\"Completed\",all_results=FALSE) dat <- dhs_surveys(surveyStatus=\"Ongoing\",all_results=FALSE) dat <- dhs_surveys(surveyStatus=\"All\",all_results=FALSE) dat <- dhs_surveys(surveyCharacteristicIds=\"32\",all_results=FALSE) dat <- dhs_surveys(tagIds=\"1\",all_results=FALSE) dat <- dhs_surveys(f=\"html\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS Tags — dhs_tags","title":"API request of DHS Tags — dhs_tags","text":"API request DHS Tags","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS Tags — dhs_tags","text":"","code":"dhs_tags(   countryIds = NULL,   indicatorIds = NULL,   surveyIds = NULL,   surveyYear = NULL,   surveyYearStart = NULL,   surveyYearEnd = NULL,   surveyType = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS Tags — dhs_tags","text":"countryIds Specify comma separated list country ids filter . list countries use dhs_countries(returnFields=c(\"CountryName\",\"DHS_CountryCode\")) indicatorIds Specify comma separated list indicators ids filter . list indicators use dhs_indicators(returnFields=c(\"IndicatorId\",\"Label\",\"Definition\")) surveyIds Specify comma separated list survey ids filter . list surveys use dhs_surveys(returnFields=c(\"SurveyId\",\"SurveyYearLabel\", \"SurveyType\",\"CountryName\")) surveyYear Specify comma separated list survey years filter . surveyYearStart Specify range Survey Years filter Tags . surveyYearStart inclusive value. Can used alone conjunction surveyYearEnd. surveyYearEnd Specify range Survey Years filter Tags . surveyYearEnd inclusive value. Can used alone conjunction surveyYearStart. surveyType Specify survey type filter . f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS Tags — dhs_tags","text":"Returns data.table 4 (less returnFields provided)   tags detailed information. indicators can tagged one   tags help identify certain topics indicator can identified   . description attributes returned provided  https://api.dhsprogram.com/rest/dhs/tags/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS Tags — dhs_tags","text":"","code":"if (FALSE) { # A good use for the tags API endpoint is to query what the # IDs are for each tag. These are useful for passing as # arguments to other API endpoints.For example to show all the ids:  dat <- dhs_tags()  # Or if your analysis is foucssed on a particular country, and you want to # see all the characteristics surveyed for e.g. Senegal  dat <- dhs_tags(countryIds=\"SN\")  # A complete list of examples for how each argument to the survey # tags API endpoint can be provided is given below, which is a # copy of each of the examples listed in the API at:  # https://api.dhsprogram.com/#/api-tags.cfm   dat <- dhs_tags(countryIds=\"EG\",all_results=FALSE) dat <- dhs_tags(indicatorIds=\"FE_FRTR_W_TFR\",all_results=FALSE) dat <- dhs_tags(surveyIds=\"SN2010DHS\",all_results=FALSE) dat <- dhs_tags(surveyYear=\"2010\",all_results=FALSE) dat <- dhs_tags(surveyYearStart=\"2006\",all_results=FALSE) dat <- dhs_tags(surveyYearStart=\"1991\", surveyYearEnd=\"2006\", all_results=FALSE) dat <- dhs_tags(surveyType=\"DHS\",all_results=FALSE) dat <- dhs_tags(f=\"html\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_ui_updates.html","id":null,"dir":"Reference","previous_headings":"","what":"API request of DHS UI Updates — dhs_ui_updates","title":"API request of DHS UI Updates — dhs_ui_updates","text":"API request DHS UI Updates","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_ui_updates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API request of DHS UI Updates — dhs_ui_updates","text":"","code":"dhs_ui_updates(   lastUpdate = NULL,   f = NULL,   returnFields = NULL,   perPage = NULL,   page = NULL,   client = NULL,   force = FALSE,   all_results = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_ui_updates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API request of DHS UI Updates — dhs_ui_updates","text":"lastUpdate Specify date Unix time filter updates . results interfaces updated specified date returned. f can specify format data returned query HTML, JSON, PJSON, geoJSON, JSONP, XML CSV. default data format JSON. returnFields Specify list attributes returned. perPage Specify number results returned per page. default API return 100 results. page Allows specifying page number obtain API request. default API return page 1. client API request cached, provide client object created client_dhs force force fetching API results, ignore cached results . Default = FALSE all_results Boolean results returned. FALSE specified page returned. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_ui_updates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"API request of DHS UI Updates — dhs_ui_updates","text":"Returns data.table 3 (less returnFields provided)   interfaces added/updated removed. detailed description   attributes returned provided  https://api.dhsprogram.com/rest/dhs/uiupdates/fields","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/dhs_ui_updates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API request of DHS UI Updates — dhs_ui_updates","text":"","code":"if (FALSE) { # The main use for the ui updates API will be to search for the last time # there was a change to the UI. For example to return all the # changes since 2018:  dat <- dhs_ui_updates(lastUpdate=\"20180101\")  # A complete list of examples for how each argument to the ui updates API # endpoint can be provided is given below, which is a copy of each of # the examples listed in the API at:  # https://api.dhsprogram.com/#/api-uiupdates.cfm   dat <- dhs_ui_updates(lastUpdate=\"20150901\",all_results=FALSE) dat <- dhs_ui_updates(f=\"html\",all_results=FALSE) }"},{"path":"https://docs.ropensci.org/rdhs/reference/download_boundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"DHS Spatial Boundaries — download_boundaries","title":"DHS Spatial Boundaries — download_boundaries","text":"Download Spatial Boundaries","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/download_boundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DHS Spatial Boundaries — download_boundaries","text":"","code":"download_boundaries(   surveyNum = NULL,   surveyId = NULL,   countryId = NULL,   method = \"sf\",   quiet_download = FALSE,   quiet_parse = TRUE,   server_sleep = 5 )"},{"path":"https://docs.ropensci.org/rdhs/reference/download_boundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DHS Spatial Boundaries — download_boundaries","text":"surveyNum Numeric survey number downloaded. Values surveyNum can found datasets surveys endpoints DHS API can accessed using dhs_datasets dhs_surveys. Default NULL, cause SurveyId used find survey. surveyId Numeric survey ID downloaded. Values surveyId can found datasets surveys endpoints DHS API can accessed using dhs_datasets dhs_surveys. Default NULL, cause SurveyNum used find survey. countryId 2-letter DHS country code country survey downloaded. Default = NULL, cause countrycode looked API. method Character downloaded shape file read . Default = \"sf\", uses sf::st_read. Currently, option available(`rgdal` used available) development reasons left parameter option possible future alternatives read spatial files. just return file paths files use method = \"zip\". quiet_download Whether download file quietly. Passed [`download_file()`]. Default `FALSE`. quiet_parse Whether read boundaries dataset quietly. Applies `method = \"sf\"`. Default `TRUE`. server_sleep Numeric length sleep prior downloading file survey. Default 5 seconds.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/download_boundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DHS Spatial Boundaries — download_boundaries","text":"Returns either spatial file `sf` (see [sf::sf]) object,   vector file paths boundary downloaded .","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/download_boundaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DHS Spatial Boundaries — download_boundaries","text":"Downloads spatial boundaries DHS spatial repository,   can found https://spatialdata.dhsprogram.com/home/.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/download_boundaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DHS Spatial Boundaries — download_boundaries","text":"","code":"if (FALSE) {  # using the surveyNum  res <- download_boundaries(surveyNum = 471, countryId = \"AF\")   # using the surveyId and no countryID  res <- download_boundaries(surveyId = \"AF2010OTH\")   }"},{"path":"https://docs.ropensci.org/rdhs/reference/download_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of datasets that your log in can download — download_datasets","title":"Create a data frame of datasets that your log in can download — download_datasets","text":"Download datasets specified using output available_datasets.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/download_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of datasets that your log in can download — download_datasets","text":"","code":"download_datasets(   config,   desired_dataset,   download_option = \"both\",   reformat = TRUE,   all_lower = TRUE,   output_dir_root = NULL,   ... )"},{"path":"https://docs.ropensci.org/rdhs/reference/download_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of datasets that your log in can download — download_datasets","text":"config Object class `rdhs_config` produced `read_rdhs_config` must contain valid `email`, `project` `password`. desired_dataset Row available_datasets download_option Character dictating survey stored downloaded. Must one : \"zip\" - Just zip. \"z\", \"\", \"p\" \"zip\" match \"rds\" - Just read saved rds. \"r\", \"d\", \"s\" \"rdhs\"     match \"\" - rds extract. \"b\", \"o\", \"t\", \"h\" \"\"     match reformat Boolean detailing whether dataset rds reformatted ease use later. Default = TRUE all_lower Logical indicating whether value labels lower case. Default `TRUE`. output_dir_root Directory files downloaded ... arguments passed read_dhs_dataset","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/extract_dhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Data — extract_dhs","title":"Extract Data — extract_dhs","text":"Extracts data downloaded datasets according data.frame requested survey variables survey definitions","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/extract_dhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Data — extract_dhs","text":"","code":"extract_dhs(questions, add_geo = FALSE)"},{"path":"https://docs.ropensci.org/rdhs/reference/extract_dhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Data — extract_dhs","text":"questions Questions queried, format search_variables search_variable_labels add_geo Add geographic information extract. Defaut = `TRUE`","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/extract_dhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Data — extract_dhs","text":"list `data.frames` survey data extracted.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/extract_dhs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Data — extract_dhs","text":"Function extract datasets using set survey questions   taken output search_variables   search_variable_labels","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/extract_dhs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Data — extract_dhs","text":"","code":"if (FALSE) { # get the model datasets included with the package model_datasets <- model_datasets  # download one of them g <- get_datasets(dataset_filenames = model_datasets$FileName[1])  # create some terms of data me may want to extrac st <- search_variable_labels(names(g), \"bed net\")  # and now extract it ex <- extract_dhs(st) }"},{"path":"https://docs.ropensci.org/rdhs/reference/extraction.html","id":null,"dir":"Reference","previous_headings":"","what":"DHS survey questions extracted from datasets — extraction","title":"DHS survey questions extracted from datasets — extraction","text":"Create list survey responses extracted using output R6_client_dhs$public_methods$survey_questions","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/extraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DHS survey questions extracted from datasets — extraction","text":"","code":"extraction(questions, available_datasets, geo_surveys, add_geo = FALSE)"},{"path":"https://docs.ropensci.org/rdhs/reference/extraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DHS survey questions extracted from datasets — extraction","text":"questions Output R6_client_dhs$public_methods$survey_questions available_datasets Datasets available. Output R6_client_dhs$public_methods$available_datasets geo_surveys Geographic Data Survey file paths. add_geo Boolean detailing geographic datasets added.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/extraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DHS survey questions extracted from datasets — extraction","text":"Returns `data.frame` variables corresponding   requested variables questions object. also   geographic data related columns `add_geo=TRUE` set.   Lastly SurveyId variable also appended corresponding  dhs_datasets$SurveyId","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/factor_format.html","id":null,"dir":"Reference","previous_headings":"","what":"reformat haven and labelled read ins to have no factors or labels — factor_format","title":"reformat haven and labelled read ins to have no factors or labels — factor_format","text":"reformat haven labelled read ins factors labels","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/factor_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reformat haven and labelled read ins to have no factors or labels — factor_format","text":"","code":"factor_format(res, reformat = FALSE, all_lower = TRUE)"},{"path":"https://docs.ropensci.org/rdhs/reference/factor_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reformat haven and labelled read ins to have no factors or labels — factor_format","text":"res dataset formatted reformat Boolean whether remove factors labels just return unfactored data. Default = FALSE all_lower Logical indicating whether value labels lower case. Default `TRUE`.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/factor_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reformat haven and labelled read ins to have no factors or labels — factor_format","text":"list formatted dataset code descriptions","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/file_dataset_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns what the dataset file ending should be for a given filename — file_dataset_format","title":"Returns what the dataset file ending should be for a given filename — file_dataset_format","text":"Returns dataset file ending given filename","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/file_dataset_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns what the dataset file ending should be for a given filename — file_dataset_format","text":"","code":"file_dataset_format(file_format)"},{"path":"https://docs.ropensci.org/rdhs/reference/file_dataset_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns what the dataset file ending should be for a given filename — file_dataset_format","text":"file_format FileFormat file taken API, e.g. dhs_datasets(returnFields = \"FileFormat\")","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/file_dataset_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns what the dataset file ending should be for a given filename — file_dataset_format","text":"One \"dat\",\"dat\",\"sas7bdat\",\"sav\" \"dta\"","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/file_dataset_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns what the dataset file ending should be for a given filename — file_dataset_format","text":"","code":"file_format <- \"Stata dataset (.dta)\" identical(rdhs:::file_dataset_format(file_format),\"dta\") #> [1] TRUE"},{"path":"https://docs.ropensci.org/rdhs/reference/get_available_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Available Datasets — get_available_datasets","title":"Get Available Datasets — get_available_datasets","text":"Details datasets login credentials access ","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_available_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Available Datasets — get_available_datasets","text":"","code":"get_available_datasets(clear_cache = FALSE)"},{"path":"https://docs.ropensci.org/rdhs/reference/get_available_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Available Datasets — get_available_datasets","text":"clear_cache Boolean detailing like clear cached available datasets first. default set FALSE. option available can make sure client fetches new datasets recently given access .","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_available_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Available Datasets — get_available_datasets","text":"data.frame 14 variables detail surveys can   download, url download links country, survey, year etc info   link.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_available_datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Available Datasets — get_available_datasets","text":"Searches DHS website datasets can download.   results function cached client. recently   requested new datasets DHS website can specify clear   cache first get new set datasets available .   function used get_datasets thus   used `clear_cache_first = TRUE` using `get_datasets`   recently requested new datasets.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_available_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Available Datasets — get_available_datasets","text":"","code":"if (FALSE) { # grab the datasets datasets <- get_available_datasets()  # and if we look at the last one it will be the model datasets from DHS tail(datasets, 1) }"},{"path":"https://docs.ropensci.org/rdhs/reference/get_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Datasets — get_datasets","title":"Get Datasets — get_datasets","text":"Downloads datasets access DHS website","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Datasets — get_datasets","text":"","code":"get_datasets(   dataset_filenames,   download_option = \"rds\",   reformat = FALSE,   all_lower = TRUE,   output_dir_root = NULL,   clear_cache = FALSE,   ... )"},{"path":"https://docs.ropensci.org/rdhs/reference/get_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Datasets — get_datasets","text":"dataset_filenames desired filenames downloaded. can found one returned fields dhs_datasets. Alternatively can also pass desired rows codedhs_datasets. download_option Character specifying whether dataset just downloaded (\"zip\"), imported saved .rds object (\"rds\"), extract rds (\"\"). Conveniently can just specify letter options. reformat Boolean concerning whether reformat read datasets removing factors labels. Default = FALSE. all_lower Logical indicating whether value labels lower case. Default `TRUE`. output_dir_root Root directory datasets stored within. default download datasets subfolder client root called \"datasets\" clear_cache available datasets cache cleared first. allow newly accessed datasets available. Default = `FALSE` ... arguments passed read_dhs_dataset","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Datasets — get_datasets","text":"Depends download_option requested, ultimately file   path dataset downloaded , can interact   accordingly.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Datasets — get_datasets","text":"Gets datasets cache downloads DHS website.   providing filenames, specified one returned fields   dhs_datasets, client log download   files requested. requested files unavailable   log , flagged first message can   make note request DHS website. also   option control whether downloaded zip file extracted   converted convenient R data.frame. converted object   subsequently saved \".rds\" object within client root   directory datasets folder, can quickly loaded   needed readRDS. also option reformat   dataset, ensure datasets returned encoded simply   character strings, .e. factors labels.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Datasets — get_datasets","text":"","code":"if (FALSE) { # get the model datasets included with the package model_datasets <- model_datasets  # download one of them g <- get_datasets(dataset_filenames = model_datasets$FileName[1]) }"},{"path":"https://docs.ropensci.org/rdhs/reference/get_downloaded_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Downloaded Datasets — get_downloaded_datasets","title":"Get Downloaded Datasets — get_downloaded_datasets","text":"Detail datasets already downloaded","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_downloaded_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Downloaded Datasets — get_downloaded_datasets","text":"","code":"get_downloaded_datasets()"},{"path":"https://docs.ropensci.org/rdhs/reference/get_downloaded_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Downloaded Datasets — get_downloaded_datasets","text":"data.frame downloaded datasets","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_downloaded_datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Downloaded Datasets — get_downloaded_datasets","text":"Returns data.frame datasets   downloaded within client. useful without   internet connection wish know saved   dataset files root directory correspond dataset","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_downloaded_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Downloaded Datasets — get_downloaded_datasets","text":"","code":"if (FALSE) { # get the model datasets included with the package model_datasets <- model_datasets  # download one of them g <- get_datasets(dataset_filenames = model_datasets$FileName[1])  # these will then be stored so that we know what datasets we have downloaded d <- get_downloaded_datasets()  # which returns a names list of file paths to the datasets d[1] }"},{"path":"https://docs.ropensci.org/rdhs/reference/get_labels_from_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Return variable labels from a dataset — get_labels_from_dataset","title":"Return variable labels from a dataset — get_labels_from_dataset","text":"Returns variable labels stored \"label\" attribute.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_labels_from_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return variable labels from a dataset — get_labels_from_dataset","text":"","code":"get_labels_from_dataset(data, return_all = TRUE)"},{"path":"https://docs.ropensci.org/rdhs/reference/get_labels_from_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return variable labels from a dataset — get_labels_from_dataset","text":"data data.frame extract variable labels. return_all Logical whether return variables (TRUE) labels.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_labels_from_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return variable labels from a dataset — get_labels_from_dataset","text":"data.frame consisting variable name labels.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_rdhs_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rdhs config — get_rdhs_config","title":"Get rdhs config — get_rdhs_config","text":"Gets rdhs config used","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_rdhs_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rdhs config — get_rdhs_config","text":"","code":"get_rdhs_config()"},{"path":"https://docs.ropensci.org/rdhs/reference/get_rdhs_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rdhs config — get_rdhs_config","text":"data.frame containing rdhs config","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_rdhs_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get rdhs config — get_rdhs_config","text":"Returns config used rdhs moment.   either `data.frame` class `rdhs_config` NULL   set yet","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_variable_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Survey Variable Labels — get_variable_labels","title":"Get Survey Variable Labels — get_variable_labels","text":"Return variable labels dataset","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_variable_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Survey Variable Labels — get_variable_labels","text":"","code":"get_variable_labels(dataset, return_all = TRUE)"},{"path":"https://docs.ropensci.org/rdhs/reference/get_variable_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Survey Variable Labels — get_variable_labels","text":"dataset Can either file path dataset, dataset `data.frame` filenames datasets. See details information return_all Logical whether return variables (TRUE) labels.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_variable_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Survey Variable Labels — get_variable_labels","text":"data.frame consisting variable name labels.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_variable_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Survey Variable Labels — get_variable_labels","text":"Returns variable names labels dataset.   can pass `data` argument   following: file path saved dataset. direct       output get_datasets read dataset, .e. produced using readRDS       load dataset       file path produced get_datasets Dataset filenames. can found one returned       fields dhs_datasets. datasets       downloaded download .","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/get_variable_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Survey Variable Labels — get_variable_labels","text":"","code":"if (FALSE) { # get the model datasets included with the package model_datasets <- model_datasets  # download one of them g <- get_datasets(dataset_filenames = model_datasets$FileName[1])  # we can pass the list of filepaths to the function head(get_variable_labels(g))  # or we can pass the full dataset r <- readRDS(g[[1]]) head(get_variable_labels(r)) }"},{"path":"https://docs.ropensci.org/rdhs/reference/last_api_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull last DHS API database update time — last_api_update","title":"Pull last DHS API database update time — last_api_update","text":"Pull last DHS API database update time","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/last_api_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull last DHS API database update time — last_api_update","text":"","code":"last_api_update(timeout = 30)"},{"path":"https://docs.ropensci.org/rdhs/reference/last_api_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull last DHS API database update time — last_api_update","text":"timeout Numeric API timeout. Default = 30","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/model_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"DHS model datasets — model_datasets","title":"DHS model datasets — model_datasets","text":"model datasets DHS website `data.frame` analogous returned `get_available_datasets()`","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/model_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DHS model datasets — model_datasets","text":"","code":"data(model_datasets)"},{"path":"https://docs.ropensci.org/rdhs/reference/model_datasets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DHS model datasets — model_datasets","text":"dataframe 36 observations 14 variables: model_datasets: dataframe model datasets \"FileFormat\" \"FileSize\" \"DatasetType\" \"SurveyNum\" \"SurveyId\" \"FileType\" \"FileDateLastModified\" \"SurveyYearLabel\" \"SurveyType\" \"SurveyYear\" \"DHS_CountryCode\" \"FileName\" \"CountryName\" \"URLS\"","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/parse_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dictionary from DHS .MAP codebook — parse_map","title":"Create dictionary from DHS .MAP codebook — parse_map","text":"Create dictionary DHS .MAP codebook","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/parse_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dictionary from DHS .MAP codebook — parse_map","text":"","code":"parse_map(map, all_lower = TRUE)"},{"path":"https://docs.ropensci.org/rdhs/reference/parse_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dictionary from DHS .MAP codebook — parse_map","text":"map character vector containing .MAP file, e.g. `readLines()`. all_lower Logical indicating whether value labels converted lower case","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/parse_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create dictionary from DHS .MAP codebook — parse_map","text":"data frame containing metadata, principally variable labels   vector value labels.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/parse_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create dictionary from DHS .MAP codebook — parse_map","text":"Currently hardcoded 111 char width .MAP files, covers   vast majority   DHS Phase V, VI, VIII. extended future perhaps add useful options.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/parse_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create dictionary from DHS .MAP codebook — parse_map","text":"","code":"mrdt_zip <- tempfile() download.file(\"https://dhsprogram.com/data/model_data/dhs/zzmr61fl.zip\",               mrdt_zip, mode=\"wb\")  map <- rdhs::read_zipdata(mrdt_zip, \"\\\\.MAP\", readLines) dct <- rdhs:::parse_map(map)"},{"path":"https://docs.ropensci.org/rdhs/reference/parse_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse fixed-width file metadata — parse_meta","title":"Parse fixed-width file metadata — parse_meta","text":"Parse dataset metadata","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/parse_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse fixed-width file metadata — parse_meta","text":"","code":"parse_dcf(dcf, all_lower = TRUE)  parse_sps(sps, all_lower = TRUE)  parse_do(do, dct, all_lower = TRUE)"},{"path":"https://docs.ropensci.org/rdhs/reference/parse_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse fixed-width file metadata — parse_meta","text":"dcf .DCF file path parse all_lower logical indicating whether convert variable labels lower case. Defaults `TRUE`. sps .SPS file character vector (e.g. readLines / brio::read_lines) .file character vector (e.g. readLines / brio::read_lines) dct .DCT file character vector (e.g. readLines / brio::read_lines)","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/parse_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse fixed-width file metadata — parse_meta","text":"data.frame metadata parsing fixed-width flat file","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/parse_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse fixed-width file metadata — parse_meta","text":"","code":"mrfl_zip <- tempfile() download.file(\"https://dhsprogram.com/data/model_data/dhs/zzmr61fl.zip\",               mrfl_zip, mode = \"wb\")  dcf <- rdhs::read_zipdata(mrfl_zip, \"\\\\.DCF\", readLines) dct <- rdhs:::parse_dcf(dcf)  sps <- rdhs::read_zipdata(mrfl_zip, \"\\\\.SPS\", readLines) dct <- rdhs:::parse_sps(sps)  do <- rdhs::read_zipdata(mrfl_zip, \"\\\\.DO\", readLines) dctin <- rdhs::read_zipdata(mrfl_zip, \"\\\\.DCT\", readLines) dct <- rdhs:::parse_do(do, dctin)"},{"path":"https://docs.ropensci.org/rdhs/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See %>% details.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://docs.ropensci.org/rdhs/reference/rbind_labelled.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine data frames with columns of class `labelled` — rbind_labelled","title":"Combine data frames with columns of class `labelled` — rbind_labelled","text":"Combine data frames columns class `labelled`","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/rbind_labelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine data frames with columns of class `labelled` — rbind_labelled","text":"","code":"rbind_labelled(..., labels = NULL, warn = TRUE)"},{"path":"https://docs.ropensci.org/rdhs/reference/rbind_labelled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine data frames with columns of class `labelled` — rbind_labelled","text":"... data frames bind together, potentially columns class \"labelled\". first argument can list data frames, similar `plyr::rbind.fill`. labels named list providing vectors value labels describing handle columns class `labelled`. See details usage. warn Logical indicating warn combining variables different value labels. Defaults TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/rbind_labelled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine data frames with columns of class `labelled` — rbind_labelled","text":"data frame.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/rbind_labelled.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine data frames with columns of class `labelled` — rbind_labelled","text":"argument `labels` provides options handle binding columns class `labelled`. Typical use provide named list elements labelled column. Elements list either vector labels applied column character string \"concatenated\", indicates labels concatenated unique labels distinct values combined vector. accomplished converting character strings, binding, casting back labelled. labelled columns labels provided `label` argument, default behaviour labels first data frame labels column inherited combined data. See examples.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/rbind_labelled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine data frames with columns of class `labelled` — rbind_labelled","text":"","code":"df1 <- data.frame( area = haven::labelled(c(1L, 2L, 3L), c(\"reg 1\"=1,\"reg 2\"=2,\"reg 3\"=3)), climate = haven::labelled(c(0L, 1L, 1L), c(\"cold\"=0,\"hot\"=1)) ) df2 <- data.frame( area    = haven::labelled(c(1L, 2L), c(\"reg A\"=1, \"reg B\"=2)), climate = haven::labelled(c(1L, 0L), c(\"cold\"=0, \"warm\"=1)) )  # Default: all data frames inherit labels from first df. Incorrect if # \"reg 1\" and \"reg A\" are from different countries, for example. dfA <- rbind_labelled(df1, df2) #> Warning: Some variables have non-matching value labels: area, climate. #> Inheriting labels from first data frame with labels. haven::as_factor(dfA) #>    area climate #> 1 reg 1    cold #> 2 reg 2     hot #> 3 reg 3     hot #> 4 reg 1     hot #> 5 reg 2    cold  # Concatenate value labels for \"area\". Regions are coded separately, # and original integer values are lost (by necessity of more levels now). # For \"climate\", codes \"1 = hot\" and \"1 = warm\", are coded as the same # outcome, inheriting \"1 = hot\" from df1 by default. dfB <- rbind_labelled(df1, df2, labels=list(area = \"concatenate\")) #> Warning: Some variables have non-matching value labels: climate. #> Inheriting labels from first data frame with labels. dfB #>   area climate #> 1    1       0 #> 2    2       1 #> 3    3       1 #> 4    4       1 #> 5    5       0 haven::as_factor(dfB) #>    area climate #> 1 reg 1    cold #> 2 reg 2     hot #> 3 reg 3     hot #> 4 reg A     hot #> 5 reg B    cold  # We can specify to code as \"1=warm/hot\" rather than inheriting \"hot\". dfC <- rbind_labelled(df1, df2, labels=list(area = \"concatenate\", climate = c(\"cold\"=0, \"warm/hot\"=1)))  dfC$climate #> <labelled<integer>[5]> #> [1] 0 1 1 1 0 #>  #> Labels: #>  value    label #>      0     cold #>      1 warm/hot haven::as_factor(dfC) #>    area  climate #> 1 reg 1     cold #> 2 reg 2 warm/hot #> 3 reg 3 warm/hot #> 4 reg A warm/hot #> 5 reg B     cold  # Or use `climate=\"concatenate\"` to code \"warm\" and \"hot\" as different. dfD <- rbind_labelled(df1, df2, labels=list(area = \"concatenate\", climate=\"concatenate\"))  dfD #>   area climate #> 1    1       1 #> 2    2       2 #> 3    3       2 #> 4    4       3 #> 5    5       1 haven::as_factor(dfD) #>    area climate #> 1 reg 1    cold #> 2 reg 2     hot #> 3 reg 3     hot #> 4 reg A    warm #> 5 reg B    cold"},{"path":"https://docs.ropensci.org/rdhs/reference/rbind_list_base.html","id":null,"dir":"Reference","previous_headings":"","what":"implementation of data.tables rbindlist — rbind_list_base","title":"implementation of data.tables rbindlist — rbind_list_base","text":"implementation data.tables rbindlist","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/rbind_list_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"implementation of data.tables rbindlist — rbind_list_base","text":"","code":"rbind_list_base(x)"},{"path":"https://docs.ropensci.org/rdhs/reference/rbind_list_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"implementation of data.tables rbindlist — rbind_list_base","text":"x List lists converted data.frame","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/rdhs.html","id":null,"dir":"Reference","previous_headings":"","what":"rdhs DHS database through R — rdhs","title":"rdhs DHS database through R — rdhs","text":"Provides client (1) querying DHS API survey indicators metadata, (2) identifying surveys datasets analysis, (3) downloading survey datasets DHS website, (4) loading datasets associate metadata R, (5) extracting variables combining datasets pooled analysis.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdhs/reference/rdhs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rdhs DHS database through R — rdhs","text":"Maintainer: OJ Watson oj.watson@hotmail.co.uk (ORCID) Authors: Jeff Eaton (ORCID) contributors: Lucy D'Agostino McGowan (ORCID) [reviewer] Duncan Gillespie [reviewer]","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"read in dhs standard file types — read_dhs_dataset","title":"read in dhs standard file types — read_dhs_dataset","text":"read dhs standard file types","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read in dhs standard file types — read_dhs_dataset","text":"","code":"read_dhs_dataset(file, dataset, reformat = FALSE, all_lower = TRUE, ...)"},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read in dhs standard file types — read_dhs_dataset","text":"file path zip file read dataset row dhs_datasets corresponds file reformat boolean detailing datasets nicely reformatted. Default = `FALSE` all_lower Logical indicating whether value labels lower case. Default `TRUE`. ... Extra arguments passed either read_dhs_dta read_dhs_flat","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_dta.html","id":null,"dir":"Reference","previous_headings":"","what":"Read DHS Stata data set — read_dhs_dta","title":"Read DHS Stata data set — read_dhs_dta","text":"function reads DHS recode dataset zipped Stata dataset. default (`mode = \"haven\"`), reads stata data set using read_dta","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_dta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read DHS Stata data set — read_dhs_dta","text":"","code":"read_dhs_dta(zfile, mode = \"haven\", all_lower = TRUE, ...)"},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_dta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read DHS Stata data set — read_dhs_dta","text":"zfile Path `.zip` file containing Stata dataset, usually ending filename `XXXXXXDT.zip` mode Read mode Stata `.dta` file. Defaults \"haven\", see 'Details' options. all_lower Logical indicating whether value labels lower case. Default `TRUE`. ... arguments passed read_zipdata. arguments pass either read_dta read.dta depending mode provided","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_dta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read DHS Stata data set — read_dhs_dta","text":"data frame. mode = 'map', value labels variable   stored `labelled` class `haven`.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_dta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read DHS Stata data set — read_dhs_dta","text":"default `mode=\"haven\"` uses  read_dta read dataset. chosen option consistent respect variable labels descriptions others. options either use use read.dta use `.MAP` dictionary file provided DHS Stata datasets reconstruct variable labels value labels. case, value labels stored stored using `labelled` class `haven`. See `?haven::labelled` information. Variable labels stored \"label\" attribute variable, `haven::read_dta()`. Currently, `mode=\"map\"` implemented 111 character fixed-width .MAP files, comprises vast majority recode data files DHS Phases V, VI, VII Phase IV. Parsers .MAP formats added future. available modes read labels Stata dataset various options available R: * `mode=\"map\"` uses `.MAP` dictionary file provided DHS Stata datasets reconstruct variable labels value labels. case, value labels stored stored using `labelled` class `haven`. See `?haven::labelled` information. Variable labels stored \"label\" attribute variable, `haven::read_dta()`. * `mode=\"haven\"`: use `haven::read_dta()` read dataset. option retains native value codings value labels affixed 'labelled' class. * `mode=\"foreign\"`: use `foreign::read.dta()`, default options convert.factors=TRUE add variable labels. Note variable labels added labels present values, variable labels available via \"val.labels\" attribute. * `mode=\"foreignNA\"`: use `foreign::read.dta(..., convert.factors=NA)`, converts values without labels 'NA'. risks data loss labelling incomplete Stata datasets. * `mode=\"raw\"`: use `foreign::read.dta(..., convert.factors=FALSE)`, simply loads underlying value coding. Variable labels value labels still available dataset attributes (see examples).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_dta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read DHS Stata data set — read_dhs_dta","text":"","code":"mrdt_zip <- tempfile() download.file(\"https://dhsprogram.com/data/model_data/dhs/zzmr61dt.zip\",               mrdt_zip, mode=\"wb\")  mr <- rdhs::read_dhs_dta(mrdt_zip,mode=\"map\") attr(mr$mv213, \"label\") #> [1] \"partner currently pregnant\" class(mr$mv213) #> [1] \"haven_labelled\" \"vctrs_vctr\"     \"integer\"        head(mr$mv213) #> <labelled<integer>[6]>: partner currently pregnant #> [1] NA  0  0 NA  0 NA #>  #> Labels: #>  value   label #>      0      no #>      1     yes #>      8  unsure #>      9 missing table(mr$mv213) #>  #>    0    1    8  #> 1766  239   57  table(haven::as_factor(mr$mv213)) #>  #>      no     yes  unsure missing  #>    1766     239      57       0   ## If Stata file codebook is complete, `mode=\"map\"` and `\"haven\"` ## should be the same. mr_hav <- rdhs::read_dhs_dta(mrdt_zip, mode=\"haven\") attr(mr_hav$mv213, \"label\") #> [1] \"partner currently pregnant\" class(mr_hav$mv213) #> [1] \"haven_labelled\" \"vctrs_vctr\"     \"double\"         head(mr_hav$mv213)  # \"9=missing\" omitted from .dta codebook #> <labelled<double>[6]>: partner currently pregnant #> [1] NA  0  0 NA  0 NA #>  #> Labels: #>  value  label #>      0     no #>      1    yes #>      8 unsure table(mr_hav$mv213) #>  #>    0    1    8  #> 1766  239   57  table(haven::as_factor(mr_hav$mv213)) #>  #>     no    yes unsure  #>   1766    239     57   ## Parsing codebook when using foreign::read.dta() # foreign issues with duplicated factors # Specifying foreignNA can help but often will not as below. # Thus we would recommend either using mode = \"haven\" or mode = \"raw\" if (FALSE) { mr_for <- rdhs::read_dhs_dta(mrdt_zip, mode=\"foreign\") mr_for <- rdhs::read_dhs_dta(mrdt_zip, mode = \"foreignNA\") } ## Don't convert factors mr_raw <- rdhs::read_dhs_dta(mrdt_zip, mode=\"raw\") table(mr_raw$mv213) #>  #>    0    1    8  #> 1766  239   57"},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_flat.html","id":null,"dir":"Reference","previous_headings":"","what":"Read DHS flat file data set — read_dhs_flat","title":"Read DHS flat file data set — read_dhs_flat","text":"function reads DHS recode dataset zipped flat file dataset.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read DHS flat file data set — read_dhs_flat","text":"","code":"read_dhs_flat(zfile, all_lower = TRUE, meta_source = NULL)"},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_flat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read DHS flat file data set — read_dhs_flat","text":"zfile Path `.zip` file containing flat file dataset, usually ending filename `XXXXXXFL.zip` all_lower Logical indicating whether value labels lower case. Default `TRUE`. meta_source character string indicating metadata source file data dictionary. Default NULL first tried use .DCF .SPS found.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_flat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read DHS flat file data set — read_dhs_flat","text":"data frame. Value labels variable stored   `labelled` class `haven`.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdhs/reference/read_dhs_flat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read DHS flat file data set — read_dhs_flat","text":"","code":"mrfl_zip <- tempfile() download.file(\"https://dhsprogram.com/data/model_data/dhs/zzmr61fl.zip\",               mrfl_zip,mode=\"wb\")  mr <- rdhs:::read_dhs_flat(mrfl_zip) attr(mr$mv213, \"label\") #> [1] \"Partner currently pregnant\" class(mr$mv213) #> [1] \"haven_labelled\" \"vctrs_vctr\"     \"integer\"        head(mr$mv213) #> <labelled<integer>[6]>: Partner currently pregnant #> [1] NA  0  0 NA  0 NA #>  #> Labels: #>  value   label #>      0      no #>      1     yes #>      8  unsure #>      9 missing table(mr$mv213) #>  #>    0    1    8    9  #> 1766  239   57   13  table(haven::as_factor(mr$mv213)) #>  #>      no     yes  unsure missing  #>    1766     239      57      13"},{"path":"https://docs.ropensci.org/rdhs/reference/read_zipdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Read filetype from a zipped folder based on the file ending — read_zipdata","title":"Read filetype from a zipped folder based on the file ending — read_zipdata","text":"Read filetype zipped folder based file ending","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/read_zipdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read filetype from a zipped folder based on the file ending — read_zipdata","text":"","code":"read_zipdata(zfile, pattern = \".dta$\", readfn = haven::read_dta, ...)"},{"path":"https://docs.ropensci.org/rdhs/reference/read_zipdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read filetype from a zipped folder based on the file ending — read_zipdata","text":"zfile Path `.zip` file containing flat file dataset, usually ending filename `XXXXXXFL.zip` pattern String detailing filetype read within zip means grep. Default = \".dta$\" readfn Function object used reading identified file within zip. Default = `haven::read_dta` ... additional arguments readfn","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/read_zipdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read filetype from a zipped folder based on the file ending — read_zipdata","text":"","code":"if (FALSE) { # get the model datasets included in the package model_datasets <- model_datasets  # download just the zip g <- get_datasets( dataset_filenames = model_datasets$FileName[1], download_option = \"zip\" )  # and then read from the zip. This function is used internally by rdhs # when using `get_datasets` with `download_option = .rds` (default) r <- read_zipdata( g[[1]], pattern = \".dta\" )  # and we can pass a function to read the file and any other args with ... r <- read_zipdata( g[[1]], pattern = \".dta\", readfn = haven::read_dta, encoding = \"UTF-8\" ) }"},{"path":"https://docs.ropensci.org/rdhs/reference/response_is_json.html","id":null,"dir":"Reference","previous_headings":"","what":"checks if the response is json or not by looking at the responses headers — response_is_json","title":"checks if the response is json or not by looking at the responses headers — response_is_json","text":"checks response json looking responses headers","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/response_is_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks if the response is json or not by looking at the responses headers — response_is_json","text":"","code":"response_is_json(x)"},{"path":"https://docs.ropensci.org/rdhs/reference/response_is_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checks if the response is json or not by looking at the responses headers — response_is_json","text":"x response","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/response_to_json.html","id":null,"dir":"Reference","previous_headings":"","what":"converts response to json by first converting the response to text — response_to_json","title":"converts response to json by first converting the response to text — response_to_json","text":"converts response json first converting response text","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/response_to_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"converts response to json by first converting the response to text — response_to_json","text":"","code":"response_to_json(x)"},{"path":"https://docs.ropensci.org/rdhs/reference/response_to_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"converts response to json by first converting the response to text — response_to_json","text":"x response","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/search_variable_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Survey Variable Definitions — search_variable_labels","title":"Search Survey Variable Definitions — search_variable_labels","text":"Searches across datasets specified requested survey variable definitions. function (search_variable_labels) used provide `questions` argument extract_dhs.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/search_variable_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Survey Variable Definitions — search_variable_labels","text":"","code":"search_variable_labels(   dataset_filenames,   search_terms = NULL,   essential_terms = NULL,   regex = NULL,   ... )"},{"path":"https://docs.ropensci.org/rdhs/reference/search_variable_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Survey Variable Definitions — search_variable_labels","text":"dataset_filenames desired filenames downloaded. can found one returned fields dhs_datasets. search_terms Character vector search terms. terms found within survey question definitions, corresponding survey variable definitions returned. essential_terms Character pattern definitions survey question definitions. .e. function first find survey variable definitions contain `search_terms` (regex) `essential_terms`. remove questions contain `essential_terms`. Default = `NULL`. regex Regex character pattern matching. want specify regex search pattern, specify argument. N.B. `search_terms` `regex`` supplied arguments regex ignored. ... arguments passed download_datasets","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/search_variable_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Survey Variable Definitions — search_variable_labels","text":"data.frame surveys matches found   resultant codes descriptions.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/search_variable_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search Survey Variable Definitions — search_variable_labels","text":"Use function get_datasets query   downloaded datasets survey questions asked.   function look downloaded imported survey datasets   cached files, download downloaded.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/search_variable_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Survey Variable Definitions — search_variable_labels","text":"","code":"if (FALSE) { # get the model datasets included with the package model_datasets <- model_datasets  # download two of them g <- get_datasets(dataset_filenames = model_datasets$FileName[1:2])  # and now seearch within these for survey variable labels of interest vars <- search_variable_labels( dataset_filenames = names(g), search_terms = \"fever\" )  head(vars)  # if we specify an essential term then no results will be returned from # a dataset if it does not have any results from the search with this term search_variable_labels( dataset_filenames = names(g), search_terms = \"fever\", essential_terms = \"primaquine\", )  # we can also use regex queries if we prefer, by passing `regex = TRUE` vars <- search_variable_labels( dataset_filenames = names(g), search_terms = \"fever|net\", regex = TRUE ) }"},{"path":"https://docs.ropensci.org/rdhs/reference/search_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Survey Variables — search_variables","title":"Search Survey Variables — search_variables","text":"Searches across datasets specified requested survey variables. function (search_variable_labels) used provide `questions` argument extract_dhs.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/search_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Survey Variables — search_variables","text":"","code":"search_variables(dataset_filenames, variables, essential_variables = NULL, ...)"},{"path":"https://docs.ropensci.org/rdhs/reference/search_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Survey Variables — search_variables","text":"dataset_filenames desired filenames downloaded. can found one returned fields dhs_datasets. variables Character vector survey variables looked essential_variables Character vector variables need present. codes present survey, survey returned function. Default = `NULL`. ... arguments passed download_datasets","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/search_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Survey Variables — search_variables","text":"data.frame surveys matches found resultant codes descriptions.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/search_variables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search Survey Variables — search_variables","text":"Use function get_datasets look   survey variables required variable.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/search_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Survey Variables — search_variables","text":"","code":"if (FALSE) { # get the model datasets included with the package model_datasets <- model_datasets  # download two of them g <- get_datasets(dataset_filenames = model_datasets$FileName[1:2])  # and now seearch within these for survey variables search_variables( dataset_filenames = names(g), variables = c(\"v002\",\"v102\",\"ml13\"), )  # if we specify an essential variable then that dataset has to have that # variable or else no variables will be returned for that datasets search_variables( dataset_filenames = names(g), variables = c(\"v002\",\"v102\",\"ml13\"), essential_variables = \"ml13\" ) }"},{"path":"https://docs.ropensci.org/rdhs/reference/set_rdhs_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Set rdhs config — set_rdhs_config","title":"Set rdhs config — set_rdhs_config","text":"Sets configuration settings using rdhs.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/set_rdhs_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set rdhs config — set_rdhs_config","text":"","code":"set_rdhs_config(   email = NULL,   project = NULL,   cache_path = NULL,   config_path = NULL,   global = TRUE,   verbose_download = FALSE,   verbose_setup = TRUE,   data_frame = NULL,   timeout = 30,   password_prompt = FALSE,   prompt = TRUE )"},{"path":"https://docs.ropensci.org/rdhs/reference/set_rdhs_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set rdhs config — set_rdhs_config","text":"email Character email used login DHS website. project Character name DHS project datasets downloaded. cache_path Character directory path datasets API calls cached. left bank, suitable directory created within user cache directory operating system (permission granting). config_path Character config file saved. global configuration, `config_path` must '~/.rdhs.json'. local configuration, `config_path` must 'rdhs.json'. left bank, config file stored within user cache directory operating system (permission granting). global Logical config_path interpreted global config path local one. Default = TRUE. verbose_download Logical dataset download progress bars shown. Default = FALSE. verbose_setup Logical rdhs setup messages printed. Default = TRUE. data_frame Function convert API calls . left blank data_frame objects returned. Must passed character. Examples : data.table::.data.table tibble::.tibble timeout Numeric long seconds wait DHS API respond. Default = 30. password_prompt Logical whether user asked type password, even previously set . Default = FALSE. Set TRUE mistyped password using set_rdhs_config. prompt Logical whether user prompted permission write files. need changed user. Default = TRUE.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/set_rdhs_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set rdhs config — set_rdhs_config","text":"Invisibly returns rdhs config object","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/set_rdhs_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set rdhs config — set_rdhs_config","text":"Setting configuration enable API results cached,   well enabling datasets DHS website downloaded also   cached. enable results cached either provide valid   `cache_path` argument, allow rdhs write user cache directory   operating system. later, leave `cache_path` argument   blank explicitly prompted give permission `rdhs`   save results directory. API calls   downloaded datasets saved temp directory deleted   R session closes. allow `rdhs` download datasets   DHS website, provide `email` `project` argument.   prompted type login password securely.   provided config (email, project, password, cache_path etc)   saved location provided `config_path`. argument provided   `config_path` either set within user cache directory   given permission , otherwise placed within   temp directory. creating config also option specify whether   `config_path` provided used local configuration global   one. controlled using `global` argument, default   set equal `TRUE`. global config saved within R root directory   (directory new R session start ). set `global`   `FALSE` config file saved within current directory.   can useful create new DHS project new piece work,   want keep datasets download project separate   another. want config file saved different   directory, must create file \"rdhs.json\" first directory   specifying full path , well setting `global` equal   `FALSE`. aside, useful DHS program see surveys   conducted used, thus helpful create   new project new piece work (e.g. different publication).   However, still recommend setting global config using   `cache_path` different projects save time   downloading datasets downloaded . Lastly, can decide API calls DHS API formatted   providing argument `data_frame`. left blank API calls   returned `data.frame` objects, however, return API calls   `data.table` objects using `data.table::.data.table`.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/set_rdhs_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set rdhs config — set_rdhs_config","text":"","code":"if (FALSE) { # normal set up we would prvide the email and project, and be prompted for # the password. (not run as it requires a prompt) set_rdhs_config(email = \"blah@gmail.com\", project = \"Blahs\", config_path = \"rdhs.json\", global = FALSE)   # otherwise we can do this by specifying prompt to FALSE set_rdhs_config( config_path = \"rdhs.json\", global = FALSE, prompt = FALSE )  # you can look at what you have set these to using \\code{get_rdhs_config} config <- get_rdhs_config() }"},{"path":"https://docs.ropensci.org/rdhs/reference/unzip_special.html","id":null,"dir":"Reference","previous_headings":"","what":"unzip special that catches for 4GB+ — unzip_special","title":"unzip special that catches for 4GB+ — unzip_special","text":"unzip special catches 4GB+","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/unzip_special.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unzip special that catches for 4GB+ — unzip_special","text":"","code":"unzip_special(   zipfile,   files = NULL,   overwrite = TRUE,   junkpaths = FALSE,   exdir = \".\",   unzip = \"internal\",   setTimes = FALSE )"},{"path":"https://docs.ropensci.org/rdhs/reference/unzip_special.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unzip special that catches for 4GB+ — unzip_special","text":"zipfile pathname zip file: tilde expansion (see path.expand performed.) files character vector recorded filepaths extracted:     default extract files. overwrite TRUE, overwrite existing files (equivalent     unzip -o), otherwise ignore files (equivalent     unzip -n). junkpaths TRUE, use basename stored     filepath extracting.  equivalent unzip -j. exdir directory extract files (equivalent     unzip -d).  created necessary. unzip method used.  alternative use     getOption(\"unzip\"), Unix-alike may set     path unzip program. setTimes logical.  internal method ,     file times set based times zip file?  (NB:     applies included files, directories.)","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/update_rdhs_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Update your current rdhs config — update_rdhs_config","title":"Update your current rdhs config — update_rdhs_config","text":"update_rdhs_config allows update elements rdhs config, without set completely via set_rdhs_config. config element, provide new changes required. update password, set password = TRUE asked securely new password.","code":""},{"path":"https://docs.ropensci.org/rdhs/reference/update_rdhs_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update your current rdhs config — update_rdhs_config","text":"","code":"update_rdhs_config(   password = FALSE,   email = NULL,   project = NULL,   cache_path = NULL,   config_path = NULL,   global = NULL,   verbose_download = NULL,   verbose_setup = NULL,   timeout = NULL,   data_frame = NULL,   project_choice = NULL )"},{"path":"https://docs.ropensci.org/rdhs/reference/update_rdhs_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update your current rdhs config — update_rdhs_config","text":"password Logical updating password securely. Default = FALSE email Character email used login DHS website. project Character name DHS project datasets downloaded. cache_path Character directory path datasets API calls cached. left bank, suitable directory created within user cache directory operating system (permission granting). config_path Character config file saved. global configuration, `config_path` must '~/.rdhs.json'. local configuration, `config_path` must 'rdhs.json'. left bank, config file stored within user cache directory operating system (permission granting). global Logical config_path interpreted global config path local one. Default = TRUE. verbose_download Logical dataset download progress bars shown. Default = FALSE. verbose_setup Logical rdhs setup messages printed. Default = TRUE. timeout Numeric long seconds wait DHS API respond. Default = 30. data_frame Function convert API calls . left blank data_frame objects returned. Must passed character. Examples : data.table::.data.table tibble::.tibble project_choice Numeric project choice. See authenticate_dhs info.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-1","dir":"Changelog","previous_headings":"","what":"rdhs 0.8.1","title":"rdhs (development version)","text":"Convert DHS dataset flat file data dictionaries UTF-8. addresses parsing issue arose following R 4.3.0 (#146; https://github.com/ropensci/rdhs/issues/146#issuecomment-1781243144). , addresses longstanding annoyance accents variable value labels parsed correctly.","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-2","dir":"Changelog","previous_headings":"","what":"rdhs 0.8.0","title":"rdhs (development version)","text":"Update deprecation spatial infrastructure (#145). geographic datasets parsed using sf::read_sf (previously rgdal::readOGR)","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-3","dir":"Changelog","previous_headings":"","what":"rdhs 0.7.6","title":"rdhs (development version)","text":"Authentication patch downloading datasets (#120)","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-4","dir":"Changelog","previous_headings":"","what":"rdhs 0.7.5","title":"rdhs (development version)","text":"download_boundaries patch (#138) pause downloading survey boundaries. Set default sleep 5 seconds avoid timeout.","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-5","dir":"Changelog","previous_headings":"","what":"rdhs 0.7.4","title":"rdhs (development version)","text":"available_datasets patch (#131) new version qdapRegex CRAN","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-6","dir":"Changelog","previous_headings":"","what":"rdhs 0.7.3","title":"rdhs (development version)","text":"Reference internal access model_datasets rdhs::model_datasets avoid errors rdhs namespace loaded.","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-7","dir":"Changelog","previous_headings":"","what":"rdhs 0.7.2","title":"rdhs (development version)","text":"available_datasets patch (#115)","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-8","dir":"Changelog","previous_headings":"","what":"rdhs 0.7.1","title":"rdhs (development version)","text":"Remove class \"dhs_dataset\" downloaded micro data sets. class anywhere creates error dplyr_v1.0. Cached datasets need re-downloaded updating clear dhs_dataset clas. Replace readLines() brio::read_lines() make parsers robust Windows encoding issues (similar https://stackoverflow.com/questions/18789330/r--windows-character-encoding-hell). Use \"sf\" default download method download_boundaries(..., method = \"sf\"). Add arguments quiet_download quiet_parse = TRUE download_boundaries(). quiet_download (default FALSE) controls download.file() messages. quiet_parse (default TRUE) controls messages sf::st_read() method = \"sf\".","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-9","dir":"Changelog","previous_headings":"","what":"rdhs 0.7.0","title":"rdhs (development version)","text":"Add CITATION info. New download_boundaries downloading spatial boundaries using (#71) New dhs_gps_data_format DHS GPS Information (#74) Tibbles can specified correctly data.frame format (#89) Config creation Windows 10 fixed (#91) Typos messaging fixed (#78, #84, #87, #92) unzip_special correctly detects 4Gb files (#43)","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-10","dir":"Changelog","previous_headings":"","what":"rdhs 0.6.3","title":"rdhs (development version)","text":"Addresses CRAN fail windows New delabel_df converting labelled data frames characters (#54)","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-11","dir":"Changelog","previous_headings":"","what":"rdhs 0.6.2","title":"rdhs (development version)","text":"Duplicate labels parsing flat data files corrected (#79)","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-12","dir":"Changelog","previous_headings":"","what":"rdhs 0.6.1","title":"rdhs (development version)","text":"extraction(add_geo=TRUE) correction Kenya 2014 surveys (#67) Geospatial covariate data sets now supported correctly (#64)","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-13","dir":"Changelog","previous_headings":"","what":"rdhs 0.6.0","title":"rdhs (development version)","text":"New as_factor.labelled backward compatibility haven <2.0.0 labelled classes. model_datasets now internal exported dataset (#60).","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-14","dir":"Changelog","previous_headings":"","what":"rdhs 0.5.2","title":"rdhs (development version)","text":"New vignettes: country_codes Documentation typos corrected (#55)","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-15","dir":"Changelog","previous_headings":"","what":"rdhs 0.5.0","title":"rdhs (development version)","text":"New set_rdhs_config providing login credentials. deprecates set_dhs_credentials. New get_rdhs_config shows credentials currently used rdhs","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-16","dir":"Changelog","previous_headings":"","what":"rdhs 0.4.0","title":"rdhs (development version)","text":"Permissionn user now required file saving. API requests can now ignore cached responses (force = TRUE) argument (#23): get_datasets(clear_cache = TRUE) clear cached available datasets, enabling newly requested datasets downloaded (@kaisero, #29). geojson objects can now requested API can return geojson objects mapping purposes (#28) e.g. :","code":"dat <- dhs_countries(force = TRUE) d <- dhs_data(countryIds = \"SN\", surveyYearStart = 2014,                breakdown = \"subnational\", returnGeometry = TRUE,               f = \"geojson\")                # convert to spatial object sp <- geojsonio::as.json(d) %>% geojsonio::geojson_sp"},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-17","dir":"Changelog","previous_headings":"","what":"rdhs 0.3.0","title":"rdhs (development version)","text":"New dhs_data(), dhs_countries() API functions (dhs_x()).","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-18","dir":"Changelog","previous_headings":"","what":"rdhs 0.2.1","title":"rdhs (development version)","text":"authenticate_dhs() now works short project names.","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-19","dir":"Changelog","previous_headings":"","what":"rdhs 0.2.0","title":"rdhs (development version)","text":"New vignettes: anemia New read_dhs_flat() reading flat datasets.","code":""},{"path":"https://docs.ropensci.org/rdhs/news/index.html","id":"rdhs-development-version-20","dir":"Changelog","previous_headings":"","what":"rdhs 0.1.0","title":"rdhs (development version)","text":"Initial share Feb, 24th 2018 colleagues UNC.","code":""}]
